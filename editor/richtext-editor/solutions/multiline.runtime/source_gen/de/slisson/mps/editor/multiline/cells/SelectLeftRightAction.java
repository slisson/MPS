package de.slisson.mps.editor.multiline.cells;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.cells.CellAction;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.selection.SelectionManager;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.internal.collections.runtime.Sequence;

public class SelectLeftRightAction implements CellAction {
  private boolean myLeft;
  private EditorCell_Word myWordCell;

  public SelectLeftRightAction(boolean left, EditorCell_Word wordCell) {
    myLeft = left;
    myWordCell = wordCell;
  }

  public boolean canExecute(EditorContext context) {
    return true;
  }

  public boolean executeInCommand() {
    return false;
  }

  public String getDescriptionText() {
    return (myLeft ? "Select Left" : "Select Right");
  }

  public void execute(EditorContext context) {
    int newPosition = (myLeft ? myWordCell.getCaretPosition() - 1 : myWordCell.getCaretPosition() + 1);
    if (myWordCell.isCaretPositionAllowed(newPosition)) {
      myWordCell.setCaretPosition(newPosition, true);
      myWordCell.ensureCaretVisible();
      return;
    }

    SelectionManager selectionManager = ((EditorComponent) context.getEditorComponent()).getSelectionManager();
    EditorCell_Multiline parent = myWordCell.getParent();
    int index = Sequence.fromIterable(parent.getWordCells()).indexOf(myWordCell);
    int wordStart = myWordCell.getParent().getTextBefore(myWordCell, 0).length();
    int selectionStart = ((myLeft ? myWordCell.getSelectionEnd() : myWordCell.getSelectionStart())) + wordStart;
    int selectionEnd = ((myLeft ? myWordCell.getSelectionStart() - 1 : myWordCell.getSelectionEnd() + 1)) + wordStart;
    selectionManager.pushSelection(new MultilineSelection(myWordCell.getEditor(), parent, selectionStart, selectionEnd));
  }
}
