package jetbrains.mps.editor.multiline.cellProviders;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import org.apache.log4j.Logger;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.util.InternUtil;
import jetbrains.mps.smodel.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.nodeEditor.attribute.AttributeKind;
import jetbrains.mps.openapi.editor.cells.SubstituteInfo;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.nodeEditor.cells.PropertyAccessor;
import jetbrains.mps.editor.multiline.cells.EditorCell_Multiline;

public class MultilineCellProvider extends CellProviderWithRole {
  private static final Logger LOG = Logger.getLogger(MultilineCellProvider.class);
  private String myPropertyName;
  private SProperty myPropertyDeclaration;

  public MultilineCellProvider(SNode node, EditorContext editorContext) {
    super(node, editorContext);
  }

  public void setRole(Object object) {
    myPropertyName = InternUtil.intern(String.valueOf(object));
    myPropertyDeclaration = getSNode().getConcept().getProperty(myPropertyName);
    if (myPropertyDeclaration == null) {
      if (!(SNodeOperations.isUnknown(getSNode()))) {
        LOG.error("no property declaration could be found in NODE " + getSNode() + " for PROPERTY name " + myPropertyName);
      }
    }
  }

  public SNode getRoleAttribute() {
    SNode node = getSNode();
    return Sequence.fromIterable(AttributeOperations.getPropertyAttributes(node, myPropertyName)).first();
  }

  public Class getRoleAttributeClass() {
    return AttributeKind.Property.class;
  }

  public SubstituteInfo createDefaultSubstituteInfo() {
    return null;
  }

  public EditorCell createEditorCell(EditorContext context) {
    PropertyAccessor propertyAccessor = new PropertyAccessor(getSNode(), myPropertyName, myReadOnly, myAllowsEmptyTarget, context);
    EditorCell editorCell = EditorCell_Multiline.create(context, propertyAccessor, getSNode());
    return editorCell;
  }
}
