package jetbrains.mps.editor.multiline.cells;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.cells.CellAction;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.nodeEditor.cells.CellConditions;
import jetbrains.mps.openapi.editor.selection.SelectionManager;
import jetbrains.mps.nodeEditor.EditorComponent;

public class SelectUpDownAction implements CellAction {
  private EditorCell_Word myWordCell;
  private boolean myUp;

  public SelectUpDownAction(EditorCell_Word wordCell, boolean up) {
    this.myWordCell = wordCell;
    myUp = up;
  }

  public void execute(EditorContext context) {
    EditorCell upperOrLower = (myUp ? myWordCell.getUpper(CellConditions.SELECTABLE, myWordCell.getCaretX()) : myWordCell.getLower(CellConditions.SELECTABLE, myWordCell.getCaretX()));
    if (!(upperOrLower instanceof EditorCell_Word)) {
      return;
    }
    EditorCell_Word upperOrLowerWordCell = (EditorCell_Word) upperOrLower;
    if (upperOrLowerWordCell.getParent() != myWordCell.getParent()) {
      return;
    }

    EditorCell_Multiline parent = myWordCell.getParent();

    int selStart = parent.getTextBefore(myWordCell, myWordCell.getCaretPosition()).length();
    upperOrLowerWordCell.setCaretX(myWordCell.getCaretX());
    int selEnd = parent.getTextBefore(upperOrLowerWordCell, upperOrLowerWordCell.getCaretPosition()).length();

    SelectionManager selectionManager = ((EditorComponent) context.getEditorComponent()).getSelectionManager();
    selectionManager.pushSelection(new MultilineSelection(myWordCell.getEditor(), parent, selStart, selEnd));

  }

  public boolean canExecute(EditorContext context) {
    return true;
  }

  public boolean executeInCommand() {
    return false;
  }

  public String getDescriptionText() {
    return (myUp ? "Select Up" : "Select Down");
  }
}
