package jetbrains.mps.editor.multiline.runtime;

/*Generated by MPS */

import java.util.List;
import java.util.Map;
import java.util.HashMap;
import org.jetbrains.annotations.NotNull;
import java.util.Iterator;
import java.util.Collection;
import java.util.ListIterator;

public class CachedIndexList<E> implements List<E> {
  private static final int THRESHOLD = 100;

  private List<E> myList;
  /**
   * The cache is only used, if myList.size() >= THRESHOLD
   */
  private Map<E, Integer> myCache = null;
  private boolean myCacheValid = false;


  public CachedIndexList(List<E> list) {
    myList = list;
  }

  protected void updateCache() {
    if (myList.size() < THRESHOLD) {
      myCache = null;
    } else {
      if (myCache == null) {
        myCache = new HashMap<E, Integer>();
      } else {
        myCache.clear();
      }
      int index = -1;
      for (E e : myList) {
        myCache.put(e, ++index);
      }
    }
    myCacheValid = true;
  }

  @Override
  public int size() {
    return myList.size();
  }

  @Override
  public boolean isEmpty() {
    return myList.isEmpty();
  }

  @Override
  public boolean contains(Object o) {
    return myList.contains(o);
  }

  @NotNull
  @Override
  public Iterator<E> iterator() {
    return new CachedIndexList.IteratorWrapper(myList.iterator());
  }

  @NotNull
  @Override
  public Object[] toArray() {
    return myList.toArray();
  }

  @NotNull
  @Override
  public <T> T[] toArray(T[] a) {
    return myList.toArray(a);
  }

  @Override
  public boolean add(E e) {
    myCacheValid = false;
    return myList.add(e);
  }

  @Override
  public boolean remove(Object o) {
    myCacheValid = false;
    return myList.remove(o);
  }

  @Override
  public boolean containsAll(Collection<?> c) {
    return myList.containsAll(c);
  }

  @Override
  public boolean addAll(Collection<? extends E> c) {
    myCacheValid = false;
    return myList.addAll(c);
  }

  @Override
  public boolean addAll(int index, Collection<? extends E> c) {
    myCacheValid = false;
    return myList.addAll(index, c);
  }

  @Override
  public boolean removeAll(Collection<?> c) {
    myCacheValid = false;
    return myList.removeAll(c);
  }

  @Override
  public boolean retainAll(Collection<?> c) {
    myCacheValid = false;
    return myList.retainAll(c);
  }

  @Override
  public void clear() {
    myCacheValid = false;
    myList.clear();
  }

  @Override
  public E get(int index) {
    return myList.get(index);
  }

  @Override
  public E set(int index, E element) {
    myCacheValid = false;
    return myList.set(index, element);
  }

  @Override
  public void add(int index, E element) {
    myCacheValid = false;
    myList.add(index, element);
  }

  @Override
  public E remove(int index) {
    myCacheValid = false;
    return myList.remove(index);
  }

  @Override
  public int indexOf(Object o) {
    if (!(myCacheValid)) {
      updateCache();
    }
    if (myCache == null) {
      return myList.indexOf(o);
    } else {
      Integer index = myCache.get(o);
      return (index == null ? -1 : index);
    }
  }

  @Override
  public int lastIndexOf(Object o) {
    return myList.lastIndexOf(o);
  }

  @NotNull
  @Override
  public ListIterator<E> listIterator() {
    return myList.listIterator();
  }

  @NotNull
  @Override
  public ListIterator<E> listIterator(int index) {
    return new CachedIndexList.ListIteratorWrapper(myList.listIterator(index));
  }

  @NotNull
  @Override
  public List<E> subList(int fromIndex, int toIndex) {
    return myList.subList(fromIndex, toIndex);
  }

  private class IteratorWrapper implements Iterator<E> {
    private Iterator<E> myWrappedIterator;

    private IteratorWrapper(Iterator<E> iterator) {
      myWrappedIterator = iterator;
    }

    @Override
    public boolean hasNext() {
      return myWrappedIterator.hasNext();
    }

    @Override
    public E next() {
      return myWrappedIterator.next();
    }

    @Override
    public void remove() {
      myCacheValid = false;
      myWrappedIterator.remove();
    }
  }

  private class ListIteratorWrapper implements ListIterator<E> {
    private ListIterator<E> myWrappedIterator;

    private ListIteratorWrapper(ListIterator<E> iterator) {
      myWrappedIterator = iterator;
    }

    @Override
    public boolean hasNext() {
      return myWrappedIterator.hasNext();
    }

    @Override
    public E next() {
      return myWrappedIterator.next();
    }

    @Override
    public boolean hasPrevious() {
      return myWrappedIterator.hasPrevious();
    }

    @Override
    public E previous() {
      return myWrappedIterator.previous();
    }

    @Override
    public int nextIndex() {
      return myWrappedIterator.nextIndex();
    }

    @Override
    public int previousIndex() {
      return myWrappedIterator.previousIndex();
    }

    @Override
    public void remove() {
      myCacheValid = false;
      myWrappedIterator.remove();
    }

    @Override
    public void set(E e) {
      myCacheValid = false;
      myWrappedIterator.set(e);
    }

    @Override
    public void add(E e) {
      myCacheValid = false;
      myWrappedIterator.add(e);
    }
  }
}
