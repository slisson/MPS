package de.slisson.mps.editor.multiline.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.ModuleRepositoryFacade;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import org.jetbrains.mps.openapi.module.SModule;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import org.jetbrains.mps.openapi.module.SModuleReference;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.errors.BaseQuickFixProvider;
import jetbrains.mps.smodel.SModelUtil_new;

public class check_runtimeLibs_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_runtimeLibs_NonTypesystemRule() {
  }

  public void applyRule(final SNode multiline, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    SNode usingLangModule = SModelOperations.getModuleStub(SNodeOperations.getModel(multiline));
    Language usingLang = ModuleRepositoryFacade.getInstance().getModule(BehaviorReflection.invokeVirtual(String.class, usingLangModule, "virtual_getFqName_1213877404258", new Object[]{}), Language.class);
    if (usingLang != null) {
      SModule moduleToInclude = ModuleRepositoryFacade.getInstance().getModule(PersistenceFacade.getInstance().createModuleReference("dc038ceb-b7ea-4fea-ac12-55f7400e97ba(de.slisson.mps.editor.multiline.runtime)"));
      boolean isIncluded = false;
      for (SModuleReference runtimeModule : CollectionSequence.fromCollection(usingLang.getRuntimeModulesReferences())) {
        if (eq_ti1slt_a0a0c0c0b(runtimeModule.getModuleId(), moduleToInclude.getModuleId())) {
          isIncluded = true;
          break;
        }
      }
      if (!(isIncluded)) {
        {
          MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(multiline, "Runtime Solution " + moduleToInclude.getModuleId() + " is not included. Go to Module Properties and add the Solution to the Runtime tab.", "r:2e3bedda-d2c6-42ea-8f39-83cfe0a4ed64(de.slisson.mps.editor.multiline.typesystem)", "8291359990510634060", null, errorTarget);
          {
            BaseQuickFixProvider intentionProvider = new BaseQuickFixProvider("de.slisson.mps.editor.multiline.typesystem.fix_Runtime_QuickFix", true);
            intentionProvider.putArgument("language", usingLang);
            intentionProvider.putArgument("moduleToAdd", moduleToInclude.getModuleReference());
            _reporter_2309309498.addIntentionProvider(intentionProvider);
          }
        }
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "de.slisson.mps.editor.multiline.structure.CellModel_Multiline";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getQualifiedName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }

  private static boolean eq_ti1slt_a0a0c0c0b(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
