package de.slisson.mps.richtext.runtime.selection;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.KeyboardHandler;
import jetbrains.mps.nodeEditor.EditorContext;
import java.awt.event.KeyEvent;
import jetbrains.mps.openapi.editor.cells.CellActionType;

public class SelectionKeyboardHandler implements KeyboardHandler {
  private KeyboardHandler myOriginalHandler;
  private RichtextSelection mySelection;


  public SelectionKeyboardHandler(RichtextSelection selection, KeyboardHandler original) {
    mySelection = selection;
    myOriginalHandler = original;
  }

  public boolean processKeyPressed(EditorContext context, KeyEvent event) {
    if (processAction(context, event)) {
      return true;
    }
    return myOriginalHandler.processKeyPressed(context, event);
  }

  public boolean processKeyTyped(EditorContext context, KeyEvent event) {
    if (processAction(context, event)) {
      return true;
    }
    if (processTextTyped(event)) {
      return true;
    }
    return myOriginalHandler.processKeyTyped(context, event);
  }

  public boolean processKeyReleased(EditorContext context, KeyEvent event) {
    return myOriginalHandler.processKeyReleased(context, event);
  }

  protected boolean processTextTyped(KeyEvent event) {
    if (event.getKeyChar() == '\0') {
      return false;
    }
    mySelection.replaceSelectedText("" + event.getKeyChar());
    return true;
  }



  private boolean processAction(EditorContext context, KeyEvent event) {
    CellActionType actionType = getActionType(context, event);
    if (actionType != null && mySelection.canExecuteAction(actionType)) {
      mySelection.executeAction(actionType);
      return true;
    }
    return false;
  }

  private CellActionType getActionType(EditorContext editorContext, KeyEvent keyEvent) {
    if (keyEvent.isShiftDown() && keyEvent.isAltDown() && keyEvent.getKeyCode() == KeyEvent.VK_LEFT) {
      return CellActionType.SELECT_LOCAL_HOME;
    }
    if (keyEvent.isShiftDown() && keyEvent.isAltDown() && keyEvent.getKeyCode() == KeyEvent.VK_RIGHT) {
      return CellActionType.SELECT_LOCAL_END;
    }
    if (keyEvent.isShiftDown() && keyEvent.getKeyCode() == KeyEvent.VK_LEFT) {
      return CellActionType.SELECT_LEFT;
    }
    if (keyEvent.isShiftDown() && keyEvent.getKeyCode() == KeyEvent.VK_RIGHT) {
      return CellActionType.SELECT_RIGHT;
    }
    return editorContext.getNodeEditorComponent().getActionType(keyEvent, editorContext);
  }
}
