package de.slisson.mps.richtext.runtime.selection;

/*Generated by MPS */

import java.awt.event.MouseListener;
import jetbrains.mps.openapi.editor.selection.SelectionListener;
import org.apache.log4j.Logger;
import java.util.WeakHashMap;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.openapi.editor.selection.Selection;
import java.awt.event.MouseEvent;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.nodeEditor.selection.EditorCellLabelSelection;
import jetbrains.mps.openapi.editor.cells.EditorCell_Label;
import jetbrains.mps.openapi.editor.selection.SingularSelection;
import de.slisson.mps.editor.multiline.cells.MultilineSelection;

public class ShiftSelector implements MouseListener, SelectionListener {
  private static Logger LOG = Logger.getLogger(ShiftSelector.class);

  private static final WeakHashMap<EditorComponent, ShiftSelector> INSTANCES = new WeakHashMap<EditorComponent, ShiftSelector>();


  public static void install(EditorComponent editorComponent) {
    ShiftSelector instance = INSTANCES.get(editorComponent);
    if (instance == null) {
      instance = new ShiftSelector(editorComponent);
      INSTANCES.put(editorComponent, instance);
      editorComponent.addMouseListener(instance);
      editorComponent.getSelectionManager().addSelectionListener(instance);
    }
  }


  private jetbrains.mps.openapi.editor.EditorComponent myEditorComponent;
  private Selection myOldOldSelection;
  private Selection myOldSelection;
  private Selection myCurrentSelection;


  public ShiftSelector(jetbrains.mps.openapi.editor.EditorComponent editorComponent) {
    myEditorComponent = editorComponent;
  }

  public void mouseClicked(MouseEvent event) {
  }

  public void mousePressed(MouseEvent event) {
    // shift + left click -> select range 
    if (event.isShiftDown() && event.getButton() == MouseEvent.BUTTON1) {
      if (myOldSelection == null || myCurrentSelection == null) {
        return;
      }
      EditorCell from = getSelectedCell(myOldSelection);
      EditorCell to = getSelectedCell(myCurrentSelection);
      LOG.info(check_bvifcg_a0a0a3a1a31(from) + " -> " + check_bvifcg_a0a0d0b0n(to));
      if (from == null || to == null) {
        return;
      }
      if (from == to) {
        if ((myOldSelection instanceof EditorCellLabelSelection) && (myCurrentSelection instanceof EditorCellLabelSelection)) {
          EditorCellLabelSelection oldLabelSelection = ((EditorCellLabelSelection) myOldSelection);
          EditorCellLabelSelection newLabelSelection = ((EditorCellLabelSelection) myCurrentSelection);
          int start = oldLabelSelection.getSelectionStart();
          int end = newLabelSelection.getSelectionEnd();
          myEditorComponent.getSelectionManager().setSelection(oldLabelSelection.getEditorCellLabel(), end, start, end);
        }
        if (from instanceof EditorCell_Label) {
        }
        return;
      }

      RichtextSelection rsel = RichtextSelection.create(from, to);
      if (rsel == null) {
        return;
      }
      myEditorComponent.getSelectionManager().setSelection(rsel);
    }
  }

  public void mouseReleased(MouseEvent event) {
  }

  public void mouseEntered(MouseEvent event) {
  }

  public void mouseExited(MouseEvent event) {
  }

  public void selectionChanged(jetbrains.mps.openapi.editor.EditorComponent component, Selection oldSelection, Selection newSelection) {
    myOldOldSelection = myOldSelection;
    myOldSelection = oldSelection;
    myCurrentSelection = newSelection;
  }



  public static EditorCell getSelectedCell(Selection selection) {
    if (selection instanceof SingularSelection) {
      return ((SingularSelection) selection).getEditorCell();
    } else if (selection instanceof MultilineSelection) {
      MultilineSelection multilineSelection = (MultilineSelection) selection;
      return multilineSelection.getCellContainingCaret();
    } else {
      return null;
    }

  }

  private static Class<?> check_bvifcg_a0a0d0b0n(EditorCell checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getClass();
    }
    return null;
  }

  private static Class<?> check_bvifcg_a0a0a3a1a31(EditorCell checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getClass();
    }
    return null;
  }
}
