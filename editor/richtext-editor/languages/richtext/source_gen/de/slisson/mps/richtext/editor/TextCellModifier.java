package de.slisson.mps.richtext.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.openapi.editor.cells.EditorCell_Collection;
import de.slisson.mps.richtext.runtime.selection.ShiftSelector;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import de.slisson.mps.richtext.util.RichtextUtil;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.openapi.editor.cells.CellAction;
import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import jetbrains.mps.openapi.editor.EditorContext;
import de.slisson.mps.editor.multiline.cells.EditorCell_Multiline;
import jetbrains.mps.openapi.editor.cells.CellTraversalUtil;
import jetbrains.mps.nodeEditor.cells.EditorCell_Label;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import de.slisson.mps.editor.multiline.cells.WordCellInitializer;
import de.slisson.mps.editor.multiline.cells.EditorCell_Word;
import de.slisson.mps.richtext.runtime.selection.RichtextPasteAction;
import java.util.List;
import java.util.ArrayList;
import de.slisson.mps.richtext.runtime.vcs.DiffPainter;

public class TextCellModifier {
  public static void modify(EditorCell cell) {
    for (EditorCell iwordCell : Sequence.fromIterable((EditorCell_Collection) cell)) {
      modifyIWordCell(iwordCell);
    }

    ShiftSelector.install((EditorComponent) cell.getEditorComponent());
  }



  public static void modifyIWordCell(EditorCell cell) {

    // A delete on a constant cell deletes the node 
    for (EditorCell_Constant constantCell : ListSequence.fromList(RichtextUtil.getAllConstantCells(cell))) {
      final EditorCell constantCell_ = constantCell;
      if (!(constantCell.getAvailableActions().contains(CellActionType.DELETE))) {
        CellAction deleteAction = new AbstractCellAction() {
          public void execute(EditorContext editorContext) {
            constantCell_.getSNode().delete();
          }
        };
        constantCell.setAction(CellActionType.DELETE, deleteAction);
        constantCell_.setAction(CellActionType.BACKSPACE, deleteAction);
      }
    }

    // remove spaces from the indent layout between plain text and other nodes 
    if (!(cell instanceof EditorCell_Multiline)) {
      EditorCell firstLeaf = CellTraversalUtil.getFirstLeaf(cell);
      EditorCell lastLeaf = CellTraversalUtil.getLastLeaf(cell);
      if (firstLeaf != null) {
        boolean editable = !(firstLeaf instanceof EditorCell_Label) || ((EditorCell_Label) firstLeaf).isEditable();
        firstLeaf.getStyle().set(StyleAttributes.PUNCTUATION_LEFT, true);
        firstLeaf.getStyle().set(StyleAttributes.FIRST_POSITION_ALLOWED, editable);
      }
      if (lastLeaf != null) {
        boolean editable = !(lastLeaf instanceof EditorCell_Label) || ((EditorCell_Label) lastLeaf).isEditable();
        lastLeaf.getStyle().set(StyleAttributes.PUNCTUATION_RIGHT, true);
        lastLeaf.getStyle().set(StyleAttributes.LAST_POSITION_ALLOWED, editable);
      }

    }

    // Override some actions of the EditorCell_Word to make selections work with embedded nodes 
    if (cell instanceof EditorCell_Multiline) {
      EditorCell_Multiline mlCell = ((EditorCell_Multiline) cell);
      mlCell.addWordCellInitializer(new WordCellInitializer() {
        public void initialize(EditorCell_Word wordCell) {
          wordCell.setAction(CellActionType.PASTE, new RichtextPasteAction(wordCell));

          List<CellActionType> actionTypes = ListSequence.fromList(new ArrayList<CellActionType>());
          ListSequence.fromList(actionTypes).addElement(CellActionType.SELECT_LEFT);
          ListSequence.fromList(actionTypes).addElement(CellActionType.SELECT_RIGHT);
          ListSequence.fromList(actionTypes).addElement(CellActionType.SELECT_UP);
          ListSequence.fromList(actionTypes).addElement(CellActionType.SELECT_DOWN);
          ListSequence.fromList(actionTypes).addElement(CellActionType.SELECT_PREVIOUS);
          ListSequence.fromList(actionTypes).addElement(CellActionType.SELECT_NEXT);
          ListSequence.fromList(actionTypes).addElement(CellActionType.SELECT_LOCAL_HOME);
          ListSequence.fromList(actionTypes).addElement(CellActionType.SELECT_LOCAL_END);
          ListSequence.fromList(actionTypes).addElement(CellActionType.SELECT_HOME);
          ListSequence.fromList(actionTypes).addElement(CellActionType.SELECT_END);
          for (CellActionType actionType : ListSequence.fromList(actionTypes)) {
            wordCell.setAction(actionType, new MultilineWordCell_SelectAction(actionType, wordCell));
          }
        }
      });
    }

    // VCS support 
    if (cell instanceof EditorCell_Multiline) {
      ((EditorCell_Multiline) cell).addBackgroundPainter(new DiffPainter());
      ((EditorCell_Multiline) cell).disabledDiffPainting();
    }

    cell.getStyle().set(StyleAttributes.INDENT_LAYOUT_NO_WRAP, true);

    // disable shift+mouse selection of multiline 
    if (cell instanceof EditorCell_Multiline) {
      ((EditorCell_Multiline) cell).addWordCellInitializer(new WordCellInitializer() {
        public void initialize(EditorCell_Word wordCell) {
          wordCell.disableShiftSelection(true);
        }
      });
    }
  }


}
