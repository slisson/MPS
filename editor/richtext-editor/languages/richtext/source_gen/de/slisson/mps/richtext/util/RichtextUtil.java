package de.slisson.mps.richtext.util;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.smodel.Language;
import org.jetbrains.mps.openapi.model.SModel;
import java.util.Set;
import org.jetbrains.mps.openapi.language.SLanguage;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.LanguageAspect;
import java.lang.reflect.Method;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.util.JavaNameUtil;
import jetbrains.mps.classloading.ClassLoaderManager;
import jetbrains.mps.openapi.editor.EditorContext;
import de.slisson.mps.editor.multiline.cells.EditorCell_Word;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import org.jetbrains.mps.openapi.language.SConceptRepository;
import jetbrains.mps.util.NameUtil;
import de.slisson.mps.richtext.behavior.Word_Behavior;
import de.slisson.mps.richtext.behavior.Text_Behavior;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import de.slisson.mps.richtext.runtime.EnrichmentInfo;
import jetbrains.mps.nodeEditor.EditorComponent;
import org.jetbrains.mps.openapi.module.SRepository;
import jetbrains.mps.smodel.event.SModelEvent;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.openapi.editor.cells.CellTraversalUtil;

public class RichtextUtil {
  public RichtextUtil() {
  }

  public static List<Language> getAllImportedLanguages(SModel model) {
    Set<SLanguage> usedlanguagesSet = model.getModule().getUsedLanguages();
    List<Language> result = ListSequence.fromList(new ArrayList<Language>());
    ListSequence.fromList(result).addSequence(SetSequence.fromSet(usedlanguagesSet).select(new ISelector<SLanguage, Language>() {
      public Language select(SLanguage it) {
        return as_5fjl1_a0a0a0a0a0a0a2a1(it.getSourceModule(), Language.class);
      }
    }).where(new IWhereFilter<Language>() {
      public boolean accept(Language it) {
        return it != null;
      }
    }));
    return result;
  }

  public static List<SNode> getAllImportedWordConcepts(SModel model) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    ListSequence.fromList(result).addSequence(ListSequence.fromList(getAllImportedLanguages(model)).translate(new ITranslator2<Language, SNode>() {
      public Iterable<SNode> translate(Language lang) {
        return ListSequence.fromList(SModelOperations.getNodes(getStructureModel(lang), "jetbrains.mps.lang.structure.structure.ConceptDeclaration")).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode concept) {
            return SConceptOperations.isSubConceptOf(((SNode) concept), "de.slisson.mps.richtext.structure.IWord");
          }
        });
      }
    }).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return (SNode) it;
      }
    }).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return !(SPropertyOperations.getBoolean(it, "abstract"));
      }
    }));
    return result;
  }

  public static SModel getActionsModel(Language language) {
    return LanguageAspect.ACTIONS.get(language);
  }

  public static SModel getStructureModel(Language language) {
    return LanguageAspect.STRUCTURE.get(language);
  }

  public static Method getEnrichmentActionMethod(SModel model, String actionId) {
    final String methodName = "enrichmentAction_" + actionId;
    Class cls = getEnrichmentActionsClass(model);
    if (cls == null) {
      return null;
    }
    Method method = Sequence.fromIterable(Sequence.fromArray(cls.getMethods())).findFirst(new IWhereFilter<Method>() {
      public boolean accept(Method it) {
        return methodName.equals(it.getName());
      }
    });
    return method;
  }

  public static Class getEnrichmentActionsClass(SModel model) {
    String packageName = JavaNameUtil.packageName(model);
    String className = packageName + ".EnrichmentActions";
    return ClassLoaderManager.getInstance().getClass(model.getModule(), className);
  }

  public static void userTriggeredEnrichment(EditorContext editorContext, SNode word) {
    EditorCell_Word cell = (EditorCell_Word) editorContext.getContextCell();
    int caretPosition = cell.getCaretPosition();
    String s1 = cell.getParent().getTextBeforeCaret();
    String s2 = cell.getParent().getTextAfterCaret();

    for (SNode concept : ListSequence.fromList(getAllImportedWordConcepts(SNodeOperations.getModel(word)))) {
      for (String transformKey : BehaviorReflection.invokeVirtualStatic((Class<Iterable<String>>) ((Class) Object.class), SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(concept)), "virtual_getTransformKeys_9006904477154868758", new Object[]{})) {

        if (s1.endsWith(transformKey)) {
          s1 = s1.substring(0, s1.length() - transformKey.length());
          Word_Behavior.call_setText_2008781830388272163(word, s1);
          if (s2.length() > 0) {
            SNode nextWord = SConceptOperations.createNewNode("de.slisson.mps.richtext.structure.Word", null);
            Word_Behavior.call_setText_2008781830388272163(nextWord, s2);
            SNodeOperations.insertNextSiblingChild(word, nextWord);
          }
          SNode richNode = SConceptOperations.createNewNode(BehaviorReflection.invokeVirtual(String.class, ((SNode) concept), "virtual_getFqName_1213877404258", new Object[]{}));
          if (s1.length() > 0) {
            SNodeOperations.insertNextSiblingChild(word, richNode);
          } else {
            SNodeOperations.replaceWithAnother(word, richNode);
          }
          break;
        }
      }
    }
    Text_Behavior.call_ensureNormalized_3868187941957822880(SNodeOperations.getAncestor(word, "de.slisson.mps.richtext.structure.Text", false, false));
  }

  public static void chooseEnrichment(SNode wordNode, EditorContext editorContext) {
    EditorCell selectedCell = editorContext.getSelectedCell();
    if (!(selectedCell instanceof EditorCell_Word)) {
      return;
    }
    EditorCell_Word wordCell = (EditorCell_Word) selectedCell;
    int start = wordCell.getParent().getTextBefore(wordCell, 0).length();
    int end = start + wordCell.getCaretPosition();

    EnrichmentInfo enrichmentInfo = new EnrichmentInfo(wordNode, start, end, editorContext);
    EditorComponent editorComponent = (EditorComponent) editorContext.getEditorComponent();
    EditorCell cell = editorContext.getContextCell();
    editorComponent.activateNodeSubstituteChooser(cell, enrichmentInfo, false, false);
  }

  public static String getNodeAsText(SNode node, SRepository repository) {
    EditorComponent editorComponent = new EditorComponent(repository) {
      protected jetbrains.mps.nodeEditor.cells.EditorCell createRootCell(List<SModelEvent> p0) {
        return null;
      }
    };
    EditorContext editorContext = new jetbrains.mps.nodeEditor.EditorContext(editorComponent, SNodeOperations.getModel(node), repository);
    return getNodeAsText(node, editorContext);
  }

  public static String getNodeAsText(SNode node, final EditorContext editorContext) {
    return editorContext.createNodeCell(node).renderText().getText();
  }

  public static SNode destructNode(SNode node, final EditorContext editorContext) {
    String descructedText = RichtextUtil.getNodeAsText(node, editorContext.getRepository());

    // prevent re-enrichment 
    if ((descructedText != null && descructedText.length() > 0)) {
      descructedText = descructedText.substring(0, descructedText.length() - 1);
    }

    SNode word = SNodeOperations.as(SNodeOperations.getPrevSibling(node), "de.slisson.mps.richtext.structure.Word");
    if ((word != null)) {
      Word_Behavior.call_setText_2008781830388272163(word, Word_Behavior.call_getText_257181264606026343(word) + descructedText);
    } else {
      word = SNodeOperations.as(SNodeOperations.getNextSibling(node), "de.slisson.mps.richtext.structure.Word");
      if ((word != null)) {
        Word_Behavior.call_setText_2008781830388272163(word, descructedText + Word_Behavior.call_getText_257181264606026343(word));
      } else {
        word = SConceptOperations.createNewNode("de.slisson.mps.richtext.structure.Word", null);
        Word_Behavior.call_setText_2008781830388272163(word, descructedText);
        SNodeOperations.insertNextSiblingChild(node, word);
      }
    }
    SNodeOperations.deleteNode(node);
    return word;
  }

  public static List<EditorCell_Constant> getAllConstantCells(EditorCell parentCell) {
    List<EditorCell_Constant> result = ListSequence.fromList(new ArrayList<EditorCell_Constant>());
    EditorCell currentLeaf = CellTraversalUtil.getFirstLeaf(parentCell);
    while (currentLeaf != null) {
      if (currentLeaf instanceof EditorCell_Constant) {
        ListSequence.fromList(result).addElement((EditorCell_Constant) currentLeaf);
      }
      currentLeaf = CellTraversalUtil.getNextLeaf(currentLeaf);
    }
    return result;
  }

  private static <T> T as_5fjl1_a0a0a0a0a0a0a2a1(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
}
