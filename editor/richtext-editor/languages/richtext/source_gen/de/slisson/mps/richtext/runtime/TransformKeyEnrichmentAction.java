package de.slisson.mps.richtext.runtime;

/*Generated by MPS */

import jetbrains.mps.smodel.action.AbstractNodeSubstituteAction;
import org.jetbrains.mps.openapi.model.SNode;
import de.slisson.mps.richtext.behavior.Word_Behavior;
import org.apache.commons.lang3.StringUtils;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import de.slisson.mps.richtext.behavior.Text_Behavior;

public class TransformKeyEnrichmentAction extends AbstractNodeSubstituteAction {
  private String key;
  private SNode concept;
  private SNode wordNode;
  private int start;
  private int end;

  public TransformKeyEnrichmentAction(SNode concept, String key, SNode wordNode, int start, int end) {
    super(concept, concept, wordNode);
    this.concept = concept;
    this.key = key;
    this.wordNode = wordNode;
    this.start = start;
    this.end = end;
  }

  protected SNode doSubstitute(String pattern) {
    String s = Word_Behavior.call_getText_257181264606026343(wordNode);
    if (s == null) {
      s = "";
    }
    String s1 = StringUtils.substring(s, 0, start);
    String s2 = StringUtils.substring(s, end, s.length());
    Word_Behavior.call_setText_2008781830388272163(wordNode, s1);
    if (s2.length() > 0) {
      SNode nextWord = SConceptOperations.createNewNode("de.slisson.mps.richtext.structure.Word", null);
      Word_Behavior.call_setText_2008781830388272163(nextWord, s2);
      SNodeOperations.insertNextSiblingChild(wordNode, nextWord);
    }
    SNode richNode = SConceptOperations.createNewNode(BehaviorReflection.invokeVirtual(String.class, ((SNode) concept), "virtual_getFqName_1213877404258", new Object[]{}));
    if (s1.length() > 0) {
      SNodeOperations.insertNextSiblingChild(wordNode, richNode);
    } else {
      SNodeOperations.replaceWithAnother(wordNode, richNode);
    }
    Text_Behavior.call_normalizeStructure_5500395430674470428(SNodeOperations.getAncestor(richNode, "de.slisson.mps.richtext.structure.Text", false, false));
    return richNode;
  }

  @Override
  protected String getMatchingText(String pattern, boolean referent_presentation, boolean visible) {
    return key;
  }
}
