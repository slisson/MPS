package de.slisson.mps.richtext.runtime;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.cellMenu.AbstractNodeSubstituteInfo;
import jetbrains.mps.openapi.editor.cells.SubstituteInfo;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import jetbrains.mps.openapi.editor.cells.SubstituteAction;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import de.slisson.mps.richtext.util.RichtextUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import org.jetbrains.mps.openapi.language.SConceptRepository;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.constraints.ModelConstraints;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;

public class EnrichmentInfo extends AbstractNodeSubstituteInfo implements SubstituteInfo {
  private EditorContext editorContext;
  private SNode wordNode;
  private int start;
  private int end;

  public EnrichmentInfo(SNode wordNode, int plainTextStart, int plainTextEnd, EditorContext editorContext) {
    super(editorContext);
    this.editorContext = editorContext;
    this.start = plainTextStart;
    this.end = plainTextEnd;
    this.wordNode = wordNode;
  }

  protected List<SubstituteAction> createActions() {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    for (SNode concept : ListSequence.fromList(RichtextUtil.getAllImportedWordConcepts(SNodeOperations.getModel(wordNode)))) {
      for (String transformKey : BehaviorReflection.invokeVirtualStatic((Class<Iterable<String>>) ((Class) Object.class), SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(concept)), "virtual_getTransformKeys_9006904477154868758", new Object[]{})) {
        TransformKeyEnrichmentAction enrichmentAction = new TransformKeyEnrichmentAction(concept, transformKey, wordNode, start, end);
        ListSequence.fromList(result).addElement(enrichmentAction);
      }
      if (isNotEmptyString(SPropertyOperations.getString(concept, "conceptAlias"))) {
        ListSequence.fromList(result).addElement(new TransformKeyEnrichmentAction(concept, SPropertyOperations.getString(concept, "conceptAlias"), wordNode, start, end));
      }
    }

    // Filter by concept constraints 
    result = ListSequence.fromList(result).where(new IWhereFilter<SubstituteAction>() {
      public boolean accept(SubstituteAction action) {
        SNode conceptNode = SNodeOperations.cast(action.getOutputConcept(), "jetbrains.mps.lang.structure.structure.ConceptDeclaration");
        if (conceptNode == null) {
          return true;
        }
        SNode parent = SNodeOperations.getParent(wordNode);

        if (!(ModelConstraints.canBeAncestor(parent, null, conceptNode, null))) {
          return false;
        }

        SNode linkDeclaration = ListSequence.fromList(SLinkOperations.getTargets(SConceptOperations.findConceptDeclaration("de.slisson.mps.richtext.structure.Text"), "linkDeclaration", true)).first();
        if (!(ModelConstraints.canBeParent(parent, conceptNode, linkDeclaration, null, null))) {
          return false;
        }
        if (!(ModelConstraints.canBeChild(BehaviorReflection.invokeVirtual(String.class, ((SNode) conceptNode), "virtual_getFqName_1213877404258", new Object[]{}), parent, linkDeclaration, null, null))) {
          return false;
        }

        return true;
      }
    }).toListSequence();

    return result;
  }

  private static boolean isNotEmptyString(String str) {
    return str != null && str.length() > 0;
  }
}
