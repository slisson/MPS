package jetbrains.mps.editor.richtext.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import jetbrains.mps.openapi.editor.selection.SelectionManager;
import jetbrains.mps.openapi.editor.cells.CellTraversalUtil;
import jetbrains.mps.openapi.editor.cells.EditorCell_Label;

public class amText {
  public static void setCellActions(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setAction(CellActionType.HOME, new amText.amText_HOME(node));
    editorCell.setAction(CellActionType.END, new amText.amText_END(node));
  }

  public static class amText_HOME extends AbstractCellAction {
    /*package*/ SNode myNode;

    public amText_HOME(SNode node) {
      this.myNode = node;
    }

    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }

    public void execute_internal(EditorContext editorContext, SNode node) {
      SelectionManager selManager = editorContext.getSelectionManager();
      EditorCell rootCell = editorContext.getEditorComponent().findNodeCell(node);
      EditorCell firstLeaf = CellTraversalUtil.getFirstLeaf(rootCell);
      if (firstLeaf instanceof EditorCell_Label) {
        selManager.setSelection((EditorCell_Label) firstLeaf, 0);
      } else {
        selManager.setSelection(firstLeaf);
      }
      selManager.getSelection().ensureVisible();
    }
  }

  public static class amText_END extends AbstractCellAction {
    /*package*/ SNode myNode;

    public amText_END(SNode node) {
      this.myNode = node;
    }

    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }

    public void execute_internal(EditorContext editorContext, SNode node) {
      SelectionManager selManager = editorContext.getSelectionManager();
      EditorCell rootCell = editorContext.getEditorComponent().findNodeCell(node);
      EditorCell lastLeaf = CellTraversalUtil.getLastLeaf(rootCell);
      if (lastLeaf instanceof EditorCell_Label) {
        EditorCell_Label lastLabel = (EditorCell_Label) lastLeaf;
        String text = lastLabel.getText();
        int textLen = (text != null ? text.length() : 0);
        selManager.setSelection(lastLabel, textLen);
      } else {
        selManager.setSelection(lastLeaf);
      }
      selManager.getSelection().ensureVisible();
    }
  }
}
