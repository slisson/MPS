package jetbrains.mps.editor.richtext.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import de.slisson.mps.editor.multiline.cells.EditorCell_Word;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.selection.SelectionManager;
import de.slisson.mps.editor.multiline.cells.EditorCell_Multiline;
import jetbrains.mps.editor.richtext.runtime.selection.RichtextSelection;

public class MultilineWordCell_SelectAction extends AbstractCellAction {
  private CellActionType myActionType;
  private EditorCell_Word myWordCell;

  public MultilineWordCell_SelectAction(CellActionType actionType, EditorCell_Word wordCell) {
    myActionType = actionType;
    myWordCell = wordCell;
  }

  public void execute(EditorContext context) {
    if (myActionType == CellActionType.SELECT_LEFT || myActionType == CellActionType.SELECT_RIGHT) {
      int newPosition = ((myActionType == CellActionType.SELECT_LEFT) ? myWordCell.getCaretPosition() - 1 : myWordCell.getCaretPosition() + 1);
      if (myWordCell.isCaretPositionAllowed(newPosition)) {
        myWordCell.setCaretPosition(newPosition, true);
        myWordCell.ensureCaretVisible();
        return;
      }
    }

    SelectionManager selectionManager = context.getEditorComponent().getSelectionManager();
    EditorCell_Multiline mlCell = myWordCell.getParent();
    int wordStart = myWordCell.getParent().getTextBefore(myWordCell, 0).length();
    int selectionStart = ((isRightToLeft() ? myWordCell.getSelectionEnd() : myWordCell.getSelectionStart())) + wordStart;
    int selectionEnd = ((isRightToLeft() ? myWordCell.getSelectionStart() : myWordCell.getSelectionEnd())) + wordStart;
    RichtextSelection selection = new RichtextSelection(myWordCell.getEditor(), mlCell, 1, selectionStart, selectionEnd, isLeftToRight());
    selectionManager.pushSelection(selection);
    selection.executeAction(myActionType);
  }

  public boolean isLeftToRight() {
    return !(isRightToLeft());
  }

  public boolean isRightToLeft() {
    switch (myActionType) {
      case SELECT_LEFT:
      case SELECT_PREVIOUS:
      case SELECT_LOCAL_HOME:
      case SELECT_HOME:
      case SELECT_UP:
        return true;
      default:
        return false;
    }
  }
}
