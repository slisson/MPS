package jetbrains.mps.editor.richtext.runtime.selection;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.selection.AbstractSelection;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import java.util.List;
import jetbrains.mps.openapi.editor.selection.Selection;
import jetbrains.mps.openapi.editor.EditorComponent;
import java.util.Map;
import jetbrains.mps.nodeEditor.cells.CellInfo;
import jetbrains.mps.openapi.editor.selection.SelectionStoreException;
import jetbrains.mps.nodeEditor.selection.SelectionRestoreException;
import jetbrains.mps.nodeEditor.selection.SelectionInfoImpl;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.openapi.editor.selection.SelectionManager;
import de.slisson.mps.editor.multiline.cells.EditorCell_Multiline;
import de.slisson.mps.editor.multiline.cells.MultilineSelection;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISequenceClosure;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.editor.richtext.behavior.Word_Behavior;
import jetbrains.mps.nodeEditor.cells.CellConditions;
import jetbrains.mps.nodeEditor.cells.EditorCell_Label;
import jetbrains.mps.smodel.ModelAccess;
import de.slisson.mps.editor.multiline.cells.EditorCell_Word;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.openapi.editor.cells.CellTraversalUtil;
import javax.swing.SwingUtilities;
import jetbrains.mps.util.Computable;
import jetbrains.mps.editor.richtext.behavior.Text_Behavior;
import jetbrains.mps.smodel.CopyUtil;
import org.apache.commons.lang3.StringUtils;
import jetbrains.mps.ide.datatransfer.CopyPasteUtil;
import jetbrains.mps.internal.collections.runtime.IterableUtils;
import jetbrains.mps.internal.collections.runtime.ISelector;
import de.slisson.mps.editor.multiline.runtime.ClipboardUtils;
import jetbrains.mps.nodeEditor.selection.EditorCellLabelSelection;
import jetbrains.mps.editor.richtext.util.SelectionUtils;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.openapi.editor.selection.SelectionInfo;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import org.apache.commons.lang3.ObjectUtils;
import java.awt.Graphics2D;
import jetbrains.mps.nodeEditor.selection.SelectionInternal;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;

public class RichtextSelection extends AbstractSelection {
  private static Logger LOG = Logger.getLogger(RichtextSelection.class);
  private static final String PROPERTY_NUM_WORDS = "numCells";
  private static final String PROPERTY_START_TEXT_POS = "startTextPos";
  private static final String PROPERTY_END_TEXT_POS = "endTextPos";
  private static final String PROPERTY_LEFT_TO_RIGHT = "leftToRight";
  private EditorCell myStartCell;
  private int myNumWords;
  private int myStartTextPos = 0;
  private int myEndTextPos = 0;
  private boolean myLeftToRight;
  private List<Selection> subSelections;
  private SelectionKeyboardHandler myLastKeyboardHandler;


  public RichtextSelection(EditorComponent editorComponent, Map<String, String> properties, CellInfo cellInfo) throws SelectionStoreException, SelectionRestoreException {
    super(editorComponent);
    if (cellInfo == null) {
      throw new SelectionStoreException("Required CellInfo parameter is null");
    }
    myStartCell = cellInfo.findCell(((jetbrains.mps.nodeEditor.EditorComponent) editorComponent));
    if (myStartCell == null) {
      throw new SelectionRestoreException();
    }
    myNumWords = SelectionInfoImpl.Util.getIntProperty(properties, PROPERTY_NUM_WORDS);
    myStartTextPos = SelectionInfoImpl.Util.getIntProperty(properties, PROPERTY_START_TEXT_POS);
    myEndTextPos = SelectionInfoImpl.Util.getIntProperty(properties, PROPERTY_END_TEXT_POS);
    myLeftToRight = SelectionInfoImpl.Util.getBooleanProperty(properties, PROPERTY_LEFT_TO_RIGHT);
    initSubSelections();
  }

  public RichtextSelection(EditorComponent editorComponent, EditorCell startCell, int numWords, int startTextPos, int endTextPos, boolean leftToRight) {
    super(editorComponent);
    myStartCell = startCell;
    myNumWords = numWords;
    myStartTextPos = startTextPos;
    myEndTextPos = endTextPos;
    myLeftToRight = leftToRight;
    initSubSelections();
  }

  public void initSubSelections() {
    subSelections = ListSequence.fromList(new ArrayList<Selection>());
    SelectionManager selectionManager = getEditorComponent().getSelectionManager();
    List<jetbrains.mps.openapi.editor.cells.EditorCell> cells = getSelectedCells();
    for (int i = 0; i < cells.size(); ++i) {
      jetbrains.mps.openapi.editor.cells.EditorCell cell = cells.get(i);
      Selection selection;
      if (cell instanceof EditorCell_Multiline) {
        EditorCell_Multiline mlCell = (EditorCell_Multiline) cell;
        int start = (myLeftToRight ? 0 : mlCell.getTextLength());
        int end = (myLeftToRight ? mlCell.getTextLength() : 0);
        if (i == 0) {
          start = myStartTextPos;
        }
        if (i == cells.size() - 1) {
          end = myEndTextPos;
        }
        selection = new MultilineSelection(getEditorComponent(), (EditorCell_Multiline) cell, start, end);
      } else {
        selection = selectionManager.createSelection(cell);
      }
      ListSequence.fromList(subSelections).addElement(selection);
    }
  }

  public void activate() {
    for (Selection selection : ListSequence.fromList(subSelections)) {
      selection.activate();
    }

    jetbrains.mps.nodeEditor.EditorComponent component = (jetbrains.mps.nodeEditor.EditorComponent) getEditorComponent();
    if (myLastKeyboardHandler != null) {
      throw new RuntimeException("Richtext Selection Keyboard Handler still active");
    }
    myLastKeyboardHandler = new SelectionKeyboardHandler(this, component.peekKeyboardHandler());
    component.pushKeyboardHandler(new SelectionKeyboardHandler(this, component.peekKeyboardHandler()));
    ensureVisible();
  }

  public void deactivate() {
    jetbrains.mps.nodeEditor.EditorComponent component = (jetbrains.mps.nodeEditor.EditorComponent) getEditorComponent();
    if (myLastKeyboardHandler == null) {
      throw new RuntimeException("Richtext Selection Keyboard Handler not active");
    }
    if (component.peekKeyboardHandler() == myLastKeyboardHandler) {
      throw new RuntimeException("Active Keyboard Handler is " + component.peekKeyboardHandler() + ", but expected " + myLastKeyboardHandler);
    }
    myLastKeyboardHandler = null;
    component.popKeyboardHandler();

    for (Selection selection : ListSequence.fromList(subSelections)) {
      selection.deactivate();
    }
  }



  public void ensureVisible() {
    ListSequence.fromList(subSelections).getElement(ListSequence.fromList(subSelections).count() - 1).ensureVisible();
  }

  public void executeAction(CellActionType type) {
    if (type == CellActionType.SELECT_LEFT) {
      selectLeftRight(true);
    } else if (type == CellActionType.SELECT_RIGHT) {
      selectLeftRight(false);
    } else if (type == CellActionType.SELECT_PREVIOUS) {
      selectNextPrevious(true);
    } else if (type == CellActionType.SELECT_NEXT) {
      selectNextPrevious(false);
    } else if (type == CellActionType.SELECT_UP) {
      selectUpDown(false);
    } else if (type == CellActionType.SELECT_DOWN) {
      selectUpDown(true);
    } else if (type == CellActionType.SELECT_LOCAL_HOME) {
      selectLocalHomeEnd(true);
    } else if (type == CellActionType.SELECT_LOCAL_END) {
      selectLocalHomeEnd(false);
    } else if (type == CellActionType.LEFT || type == CellActionType.RIGHT || type == CellActionType.DOWN || type == CellActionType.UP) {
      clearSelection();
    } else if (type == CellActionType.COPY) {
      copySelectedNodes();
    } else if (type == CellActionType.CUT) {
      copySelectedNodes();
      executeDeleteSelected();
    } else if (type == CellActionType.PASTE) {
      pasteFromClipboard();
    } else if (type == CellActionType.DELETE || type == CellActionType.BACKSPACE) {
      executeDeleteSelected();
    } else {
      LOG.warning("Unhandled action in RichtextSelection: " + type);
    }
  }

  public boolean canExecuteAction(CellActionType type) {
    switch (type) {
      case SELECT_LEFT:
      case SELECT_RIGHT:
      case SELECT_PREVIOUS:
      case SELECT_NEXT:
      case SELECT_UP:
      case SELECT_DOWN:
      case SELECT_LOCAL_HOME:
      case SELECT_LOCAL_END:
      case LEFT:
      case RIGHT:
      case DOWN:
      case UP:
      case COPY:
      case CUT:
      case PASTE:
      case DELETE:
      case BACKSPACE:
        return true;
      default:
        return false;
    }
  }

  public void selectLeftRight(boolean left) {
    boolean extend = left != myLeftToRight;
    Iterable<SNode> selectedNodes = Sequence.fromClosure(new ISequenceClosure<SNode>() {
      public Iterable<SNode> iterable() {
        return getSelectedNodes();
      }
    });
    SNode endNode = Sequence.fromIterable(selectedNodes).last();
    int newEndTextPos = (left ? myEndTextPos - 1 : myEndTextPos + 1);
    if (SNodeOperations.isInstanceOf(endNode, "jetbrains.mps.editor.richtext.structure.Word") && Word_Behavior.call_isValidCursorPosition_6973228588407182986(SNodeOperations.cast(endNode, "jetbrains.mps.editor.richtext.structure.Word"), newEndTextPos)) {
      RichtextSelection newSelection = new RichtextSelection(getEditorComponent(), myStartCell, myNumWords, myStartTextPos, newEndTextPos, myLeftToRight);
      getEditorComponent().getSelectionManager().setSelection(newSelection);
    } else {
      SNode newEndNode = (left ? SNodeOperations.getPrevSibling(endNode) : SNodeOperations.getNextSibling(endNode));
      if ((newEndNode == null)) {
        return;
      }
      if (SNodeOperations.isInstanceOf(newEndNode, "jetbrains.mps.editor.richtext.structure.Word")) {
        newEndTextPos = (left ? Word_Behavior.call_getText_257181264606026343(SNodeOperations.cast(newEndNode, "jetbrains.mps.editor.richtext.structure.Word")).length() - 1 : 1);
      }
      RichtextSelection newSelection = new RichtextSelection(getEditorComponent(), myStartCell, myNumWords + ((extend ? 1 : -1)), myStartTextPos, newEndTextPos, myLeftToRight);
      getEditorComponent().getSelectionManager().setSelection(newSelection);
    }
  }

  public void selectNextPrevious(boolean previous) {
    jetbrains.mps.openapi.editor.cells.EditorCell cursorCell = getCursorCell();
    if (!(cursorCell instanceof EditorCell)) {
      return;
    }
    EditorCell internalCursorCell = (EditorCell) cursorCell;
    if (cursorCell == null) {
      return;
    }
    jetbrains.mps.openapi.editor.cells.EditorCell targetCell = (previous ? internalCursorCell.getUpper(CellConditions.SELECTABLE, internalCursorCell.getCaretX()) : internalCursorCell.getLower(CellConditions.SELECTABLE, internalCursorCell.getCaretX()));
    jetbrains.mps.openapi.editor.cells.EditorCell startCell = getStartCell();
    targetCell.setCaretX(cursorCell.getCaretX());
    int targetCaretPos = ((targetCell instanceof EditorCell_Label) ? ((EditorCell_Label) targetCell).getCaretPosition() : 0);
    RichtextSelection newSelection = create(startCell, myStartTextPos, targetCell, targetCaretPos);
    if (newSelection != null) {
      getEditorComponent().getSelectionManager().setSelection(newSelection);
    }
  }

  public void selectUpDown(final boolean down) {
    if (ModelAccess.instance().canRead()) {
      selectUpDown_(down);
    } else {
      ModelAccess.instance().runReadAction(new Runnable() {
        public void run() {
          selectUpDown_(down);
        }
      });
    }
  }

  private void selectUpDown_(boolean down) {
    if (myLeftToRight != down) {
      getEditorComponent().getSelectionManager().popSelection();
      return;
    }

    // select the whole word cell 
    if (myNumWords == 1 && myStartCell instanceof EditorCell_Multiline) {
      EditorCell_Multiline mlCell = ((EditorCell_Multiline) myStartCell);
      EditorCell_Word startCell = mlCell.getWordCellContainingPos(myStartTextPos);
      if (startCell == mlCell.getWordCellContainingPos(myEndTextPos)) {
        int start = mlCell.getTextBefore(startCell, 0).length();
        int end = start + startCell.getText().length();
        if (!(down)) {
          // swap start and end 
          int temp = start;
          start = end;
          end = temp;
        }

        RichtextSelection newSelection = new RichtextSelection(getEditorComponent(), myStartCell, 1, start, end, down);
        if (!(isSame(newSelection))) {
          getEditorComponent().getSelectionManager().pushSelection(newSelection);
          return;
        }
      }
    }

    // select the whole 'Text' node content 
    SNode textNode = SNodeOperations.getAncestor(ListSequence.fromList(getSelectedNodes()).first(), "jetbrains.mps.editor.richtext.structure.Text", false, false);
    jetbrains.mps.openapi.editor.cells.EditorCell firstCell = getEditorComponent().findNodeCell(ListSequence.fromList(SLinkOperations.getTargets(textNode, "words", true)).first());
    jetbrains.mps.openapi.editor.cells.EditorCell lastCell = getEditorComponent().findNodeCell(ListSequence.fromList(SLinkOperations.getTargets(textNode, "words", true)).last());
    Integer endTextPos = check_irpwvl_a0j0z(as_irpwvl_a0a0j0z(lastCell, EditorCell_Multiline.class));
    if (endTextPos == null) {
      endTextPos = 0;
    }
    Selection newSelection = (down ? new RichtextSelection(getEditorComponent(), (EditorCell) firstCell, ListSequence.fromList(SLinkOperations.getTargets(textNode, "words", true)).count(), 0, endTextPos, down) : new RichtextSelection(getEditorComponent(), (EditorCell) lastCell, ListSequence.fromList(SLinkOperations.getTargets(textNode, "words", true)).count(), endTextPos, 0, down));
    if (!(isSame(newSelection))) {
      getEditorComponent().getSelectionManager().pushSelection(newSelection);
      return;
    }

    // select the 'Text' node 
    newSelection = getEditorComponent().getSelectionManager().createSelection(getEditorComponent().findNodeCell(textNode));
    getEditorComponent().getSelectionManager().pushSelection(newSelection);

  }



  public void selectLocalHomeEnd(boolean left) {
    Iterable<SNode> selectedNodes = Sequence.fromClosure(new ISequenceClosure<SNode>() {
      public Iterable<SNode> iterable() {
        return getSelectedNodes();
      }
    });
    SNode endNode = Sequence.fromIterable(selectedNodes).last();
    if (endNode == null) {
      return;
    }
    boolean extend = left != myLeftToRight;
    int newEndTextPos = (left ? myEndTextPos - 1 : myEndTextPos + 1);
    if (SNodeOperations.isInstanceOf(endNode, "jetbrains.mps.editor.richtext.structure.Word") && Word_Behavior.call_isValidCursorPosition_6973228588407182986(SNodeOperations.cast(endNode, "jetbrains.mps.editor.richtext.structure.Word"), newEndTextPos)) {
      SNode endWord = SNodeOperations.cast(endNode, "jetbrains.mps.editor.richtext.structure.Word");
      String text = Word_Behavior.call_getText_257181264606026343(endWord);
      int textLen = text.length();

      if (left) {
        newEndTextPos--;
        while (newEndTextPos > 0) {
          if (isWhitespaceChar(text.charAt(newEndTextPos)) != isWhitespaceChar(text.charAt(newEndTextPos - 1))) {
            break;
          }
          newEndTextPos--;
        }
      } else {
        newEndTextPos++;
        while (newEndTextPos < textLen - 1) {
          if (isWhitespaceChar(text.charAt(newEndTextPos - 1)) != isWhitespaceChar(text.charAt(newEndTextPos))) {
            break;
          }
          newEndTextPos++;
        }
      }


      RichtextSelection newSelection = new RichtextSelection(getEditorComponent(), myStartCell, myNumWords, myStartTextPos, newEndTextPos, myLeftToRight);
      getEditorComponent().getSelectionManager().setSelection(newSelection);
    } else {
      SNode newEndNode = (left ? SNodeOperations.getPrevSibling(endNode) : SNodeOperations.getNextSibling(endNode));
      if ((newEndNode == null)) {
        return;
      }
      if (SNodeOperations.isInstanceOf(newEndNode, "jetbrains.mps.editor.richtext.structure.Word")) {
        newEndTextPos = (left ? Word_Behavior.call_getText_257181264606026343(SNodeOperations.cast(newEndNode, "jetbrains.mps.editor.richtext.structure.Word")).length() - 1 : 1);
      }
      RichtextSelection newSelection = new RichtextSelection(getEditorComponent(), myStartCell, myNumWords + ((extend ? 1 : -1)), myStartTextPos, newEndTextPos, myLeftToRight);
      getEditorComponent().getSelectionManager().setSelection(newSelection);

    }
  }



  public boolean isWhitespaceChar(char c) {
    return c == ' ' || c == '\n' || c == '\r' || c == '\t';
  }



  public jetbrains.mps.openapi.editor.cells.EditorCell getCursorCell() {
    jetbrains.mps.openapi.editor.cells.EditorCell collectionCell = ListSequence.fromList(getSelectedCells()).last();
    if (collectionCell == null) {
      return null;
    }
    if (collectionCell instanceof EditorCell_Multiline) {
      EditorCell_Multiline mlCell = ((EditorCell_Multiline) collectionCell);
      return mlCell.getWordCellContainingPos(myEndTextPos);
    } else {
      return (myLeftToRight ? CellTraversalUtil.getLastLeaf(collectionCell) : CellTraversalUtil.getFirstLeaf(collectionCell));
    }
  }

  public jetbrains.mps.openapi.editor.cells.EditorCell getStartCell() {
    jetbrains.mps.openapi.editor.cells.EditorCell collectionCell = ListSequence.fromList(getSelectedCells()).first();
    if (collectionCell == null) {
      return null;
    }
    if (collectionCell instanceof EditorCell_Multiline) {
      EditorCell_Multiline mlCell = ((EditorCell_Multiline) collectionCell);
      return mlCell.getWordCellContainingPos(myStartTextPos);
    } else {
      return (myLeftToRight ? CellTraversalUtil.getFirstLeaf(collectionCell) : CellTraversalUtil.getLastLeaf(collectionCell));
    }
  }

  public void executeDeleteSelected() {

    // store caret position (left before the selection) 
    final CaretPosition caretPosition = new CaretPosition(getEditorComponent().getEditorContext());
    jetbrains.mps.openapi.editor.cells.EditorCell leftCell = (myLeftToRight ? ListSequence.fromList(getSelectedCells()).first() : ListSequence.fromList(getSelectedCells()).last());
    if (leftCell instanceof EditorCell_Multiline) {
      caretPosition.remember(((EditorCell_Multiline) leftCell), (myLeftToRight ? myStartTextPos : myEndTextPos));
    } else {
      jetbrains.mps.openapi.editor.cells.EditorCell cellBefore = CellTraversalUtil.getPrevSibling(leftCell);
      if (cellBefore instanceof EditorCell_Multiline) {
        EditorCell_Multiline mlCell = ((EditorCell_Multiline) cellBefore);
        caretPosition.remember(mlCell, mlCell.getTextLength());
      } else {
        caretPosition.remember(leftCell);
      }
    }

    if (ModelAccess.instance().canWrite()) {
      deleteSelected();

      // Restore selection, but we first have to wait for the current model modification to finish 
      SwingUtilities.invokeLater(new Runnable() {
        public void run() {
          ((jetbrains.mps.nodeEditor.EditorComponent) getEditorComponent()).flushEvents();
          caretPosition.tryRestore();
          getEditorComponent().getSelectionManager().getSelection().ensureVisible();
        }
      });
    } else {
      getEditorComponent().getEditorContext().executeCommand(new Computable<TextPosition>() {
        public TextPosition compute() {
          return deleteSelected();
        }
      });

      // restore selection 
      ((jetbrains.mps.nodeEditor.EditorComponent) getEditorComponent()).flushEvents();
      caretPosition.tryRestore();
      getEditorComponent().getSelectionManager().getSelection().ensureVisible();

      getEditorComponent().update();
    }
  }

  public SNode getFirstWordNodeLeft(SNode node) {
    if (node == null) {
      return null;
    }
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.editor.richtext.structure.Word")) {
      return SNodeOperations.cast(node, "jetbrains.mps.editor.richtext.structure.Word");
    }
    return getFirstWordNodeLeft(SNodeOperations.getPrevSibling(node));
  }

  public TextPosition deleteSelected() {
    List<SNode> selectedNodes = (List<SNode>) getSelectedNodes();
    SNode text = SNodeOperations.as(SNodeOperations.getParent(ListSequence.fromList(selectedNodes).first()), "jetbrains.mps.editor.richtext.structure.Text");
    SNode leftNode = (myLeftToRight ? ListSequence.fromList(selectedNodes).first() : ListSequence.fromList(selectedNodes).last());
    SNode leftWord = getFirstWordNodeLeft(leftNode);
    TextPosition caretPosition = new TextPosition(leftWord, Word_Behavior.call_getTextLength_6973228588407182844(leftWord));
    for (int i = 0; i < selectedNodes.size(); ++i) {
      SNode node = selectedNodes.get(i);
      boolean isFirst = i == 0;
      boolean isLast = i == selectedNodes.size() - 1;
      if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.editor.richtext.structure.Word") && (isFirst || isLast)) {
        SNode wordNode = SNodeOperations.cast(node, "jetbrains.mps.editor.richtext.structure.Word");
        int removeStart = 0;
        int removeEnd = Word_Behavior.call_getTextLength_6973228588407182844(wordNode);
        if (myLeftToRight) {
          if (isFirst) {
            removeStart = myStartTextPos;
          }
          if (isLast) {
            removeEnd = myEndTextPos;
          }
        } else {
          if (isFirst) {
            removeEnd = myStartTextPos;
          }
          if (isLast) {
            removeStart = myEndTextPos;
          }
        }
        String oldText = Word_Behavior.call_getText_257181264606026343(wordNode);
        Word_Behavior.call_setText_2008781830388272163(wordNode, oldText.substring(0, removeStart) + oldText.substring(removeEnd, oldText.length()));

        if (node == leftNode) {
          caretPosition.setWord(wordNode);
          caretPosition.setRelativePos(removeStart);
        }
      } else {
        SNodeOperations.detachNode(node);
      }
    }
    Text_Behavior.call_ensureNormalized_3868187941957822880(text);
    return caretPosition;
  }

  public List<SNode> getSelectedWords() {
    List<SNode> nodes = (List<SNode>) CopyUtil.copy(getSelectedNodes());
    SNode firstWord = SNodeOperations.as(ListSequence.fromList(nodes).first(), "jetbrains.mps.editor.richtext.structure.Word");
    SNode lastWord = SNodeOperations.as(ListSequence.fromList(nodes).last(), "jetbrains.mps.editor.richtext.structure.Word");
    if (myLeftToRight) {
      if ((lastWord != null)) {
        Word_Behavior.call_setText_2008781830388272163(lastWord, StringUtils.substring(Word_Behavior.call_getText_257181264606026343(lastWord), 0, myEndTextPos));
      }
      if ((firstWord != null)) {
        Word_Behavior.call_setText_2008781830388272163(firstWord, StringUtils.substring(Word_Behavior.call_getText_257181264606026343(firstWord), myStartTextPos));
      }
    } else {
      if ((firstWord != null)) {
        Word_Behavior.call_setText_2008781830388272163(firstWord, StringUtils.substring(Word_Behavior.call_getText_257181264606026343(firstWord), 0, myStartTextPos));
      }
      if ((lastWord != null)) {
        Word_Behavior.call_setText_2008781830388272163(lastWord, StringUtils.substring(Word_Behavior.call_getText_257181264606026343(lastWord), myEndTextPos, Integer.MAX_VALUE));
      }
      nodes = ListSequence.fromList(nodes).reversedList();
    }
    return nodes;
  }

  public void copySelectedNodes() {
    List<SNode> words = getSelectedWords();
    if (ListSequence.fromList(words).count() == 1 && SNodeOperations.isInstanceOf(ListSequence.fromList(words).getElement(0), "jetbrains.mps.editor.richtext.structure.Word")) {
      CopyPasteUtil.copyTextToClipboard(Word_Behavior.call_getText_257181264606026343(SNodeOperations.cast(ListSequence.fromList(words).getElement(0), "jetbrains.mps.editor.richtext.structure.Word")));
    } else {
      String plainText = IterableUtils.join(ListSequence.fromList(words).select(new ISelector<SNode, String>() {
        public String select(SNode it) {
          return StringUtils.defaultString(check_irpwvl_a0a0a0a0a0a0b0lb(SNodeOperations.as(it, "jetbrains.mps.editor.richtext.structure.IWord")));
        }
      }), "");
      CopyPasteUtil.copyNodesAndTextToClipboard(words, plainText);
    }
  }

  public void pasteFromClipboard() {
    if (CopyPasteUtil.doesClipboardContainNode()) {
      replaceSelected(((List<SNode>) CopyPasteUtil.getNodesFromClipboard(myStartCell.getSNode().getModel())));
    } else {
      TextPosition caretPos = deleteSelected();
      Word_Behavior.call_insertTextAt_5745648783531951228(caretPos.getWord(), ClipboardUtils.getClipboardText(), caretPos.getRelativePos());
    }
  }

  /**
   * 
   * 
   * @return the replaced IWords
   */
  public List<SNode> replaceSelected(List<SNode> replaceWith) {
    LOG.info("replaceSelected " + replaceWith);
    List<SNode> selectedWords = getSelectedWords();

    TextPosition caretPos = deleteSelected();
    Word_Behavior.call_insertNodesAt_5696298824709660047(caretPos.getWord(), replaceWith, caretPos.getRelativePos());

    return selectedWords;
  }

  public List<SNode> replaceSelected(SNode replaceWith) {
    List<SNode> list = new ArrayList<SNode>();
    ListSequence.fromList(list).addElement(replaceWith);
    return replaceSelected(list);
  }

  public void clearSelection() {
    SelectionManager selectionManager = getEditorComponent().getSelectionManager();
    Selection deepest = selectionManager.getDeepestSelection();
    if (deepest instanceof EditorCellLabelSelection) {
      selectionManager.setSelection(deepest);
      return;
    }

    deactivate();
    Iterable<jetbrains.mps.openapi.editor.cells.EditorCell> selectedCells = Sequence.fromClosure(new ISequenceClosure<jetbrains.mps.openapi.editor.cells.EditorCell>() {
      public Iterable<jetbrains.mps.openapi.editor.cells.EditorCell> iterable() {
        return getSelectedCells();
      }
    });
    jetbrains.mps.openapi.editor.cells.EditorCell cursorCell = Sequence.fromIterable(selectedCells).last();
    selectionManager.clearSelection();
    if (cursorCell instanceof EditorCell_Multiline) {
      ((EditorCell_Multiline) cursorCell).setCaretPosition(myEndTextPos, true);
    } else {
      if (myLeftToRight) {
        SelectionUtils.setCursorAtEndOfCell(cursorCell, getEditorComponent().getEditorContext());
      } else {
        SelectionUtils.setCursorAtBeginningOfCell(cursorCell, getEditorComponent().getEditorContext());
      }
    }
  }

  @NotNull
  public List<jetbrains.mps.openapi.editor.cells.EditorCell> getSelectedCells() {
    List<jetbrains.mps.openapi.editor.cells.EditorCell> result = new ArrayList<jetbrains.mps.openapi.editor.cells.EditorCell>();
    EditorCell currentCell = myStartCell;
    for (int i = 0; i < myNumWords; ++i) {
      result.add(currentCell);
      currentCell = (myLeftToRight ? currentCell.getNextSibling() : currentCell.getPrevSibling());
    }
    return result;
  }

  @NotNull
  public List<SNode> getSelectedNodes() {
    List<SNode> result = new ArrayList<SNode>();
    for (jetbrains.mps.openapi.editor.cells.EditorCell cell : ListSequence.fromList(getSelectedCells())) {
      result.add(cell.getSNode());
    }
    return result;
  }

  public SelectionInfo getSelectionInfo() throws SelectionStoreException {
    SelectionInfoImpl selectionInfo = new SelectionInfoImpl(this.getClass().getName(), PersistenceFacade.getInstance().createModuleReference("92d2ea16-5a42-4fdf-a676-c7604efe3504(jetbrains.mps.editor.richtext)").getModuleName());
    selectionInfo.setCellInfo(myStartCell.getCellInfo());
    selectionInfo.getPropertiesMap().put(PROPERTY_NUM_WORDS, Integer.toString(myNumWords));
    selectionInfo.getPropertiesMap().put(PROPERTY_START_TEXT_POS, Integer.toString(myStartTextPos));
    selectionInfo.getPropertiesMap().put(PROPERTY_END_TEXT_POS, Integer.toString(myEndTextPos));
    selectionInfo.getPropertiesMap().put(PROPERTY_LEFT_TO_RIGHT, Boolean.toString(myLeftToRight));
    return selectionInfo;
  }

  public boolean isSame(Selection other) {
    if (this == other) {
      return true;
    }
    if (other == null || getClass() != other.getClass()) {
      return false;
    }
    RichtextSelection otherRTSelection = (RichtextSelection) other;
    if (!(ObjectUtils.equals(myStartCell, otherRTSelection.myStartCell))) {
      return false;
    }
    if (myNumWords != otherRTSelection.myNumWords) {
      return false;
    }
    if (myStartTextPos != otherRTSelection.myStartTextPos) {
      return false;
    }
    if (myEndTextPos != otherRTSelection.myEndTextPos) {
      return false;
    }
    if (myLeftToRight != otherRTSelection.myLeftToRight) {
      return false;
    }
    return true;
  }

  public void paintSelection(Graphics2D d) {
    for (Selection selection : ListSequence.fromList(subSelections)) {
      check_irpwvl_a0a0a64(as_irpwvl_a0a0a0a64(selection, SelectionInternal.class), d);
    }
  }

  public static RichtextSelection create(jetbrains.mps.openapi.editor.cells.EditorCell startLeaf, jetbrains.mps.openapi.editor.cells.EditorCell endLeaf) {
    int startPos = 0;
    int endPos = 0;
    if (startLeaf instanceof EditorCell_Label) {
      startPos = ((EditorCell_Label) startLeaf).getCaretPosition();
    }
    if (endLeaf instanceof EditorCell_Label) {
      endPos = ((EditorCell_Label) endLeaf).getCaretPosition();
    }
    return create(startLeaf, startPos, endLeaf, endPos);
  }

  public static RichtextSelection create(final jetbrains.mps.openapi.editor.cells.EditorCell startLeaf, final int startLeafTextPos, final jetbrains.mps.openapi.editor.cells.EditorCell endLeaf, final int endLeafCursorPos) {
    final Wrappers._T<RichtextSelection> result = new Wrappers._T<RichtextSelection>();
    ModelAccess.instance().requireRead(new _Adapters._return_P0_E0_to_Runnable_adapter(new _FunctionTypes._return_P0_E0<RichtextSelection>() {
      public RichtextSelection invoke() {
        SNode commonParentText = SNodeOperations.getAncestor(getFirstCommonParentNode(startLeaf, endLeaf), "jetbrains.mps.editor.richtext.structure.Text", true, false);
        if ((commonParentText == null)) {
          return null;
        }
        jetbrains.mps.nodeEditor.EditorComponent editor = (jetbrains.mps.nodeEditor.EditorComponent) startLeaf.getEditorComponent();
        SNode startWord = getParentIWord(startLeaf, commonParentText);
        SNode endWord = getParentIWord(endLeaf, commonParentText);
        int numWords = Math.abs(SNodeOperations.getIndexInParent(startWord) - SNodeOperations.getIndexInParent(endWord)) + 1;
        int endTextPos = 0;
        if (SNodeOperations.isInstanceOf(endWord, "jetbrains.mps.editor.richtext.structure.Word") && endLeaf instanceof EditorCell_Word) {
          EditorCell_Word wordCell = ((EditorCell_Word) endLeaf);
          endTextPos = wordCell.getParent().getAbsoluteTextPosition(wordCell, endLeafCursorPos);
        }
        int startTextPos = 0;
        if (SNodeOperations.isInstanceOf(startWord, "jetbrains.mps.editor.richtext.structure.Word") && startLeaf instanceof EditorCell_Word) {
          EditorCell_Word wordCell = ((EditorCell_Word) startLeaf);
          startTextPos = wordCell.getParent().getAbsoluteTextPosition(wordCell, startLeafTextPos);
        }
        boolean leftToRight = (numWords == 1 ? startLeafTextPos < endTextPos : SNodeOperations.getIndexInParent(startWord) < SNodeOperations.getIndexInParent(endWord));
        return result.value = new RichtextSelection(editor, editor.findNodeCell(startWord), numWords, startTextPos, endTextPos, leftToRight);
      }
    }));
    return result.value;
  }

  public static RichtextSelection create(EditorCellLabelSelection selection) {
    EditorCell_Word wordCell = as_irpwvl_a0a0a94(check_irpwvl_a0a0a94(selection), EditorCell_Word.class);
    if (wordCell == null) {
      return null;
    }
    SNode node = wordCell.getSNode();
    if (!(SNodeOperations.isInstanceOf(node, "jetbrains.mps.editor.richtext.structure.Word"))) {
      return null;
    }

    int start = wordCell.getParent().getAbsoluteTextPosition(wordCell, wordCell.getSelectionStart());
    int end = wordCell.getParent().getAbsoluteTextPosition(wordCell, wordCell.getSelectionEnd());
    return new RichtextSelection(selection.getEditorComponent(), wordCell.getParent(), 1, start, end, true);
  }

  public static RichtextSelection create(Selection selection) {
    if (selection instanceof RichtextSelection) {
      return (RichtextSelection) selection;
    } else if (selection instanceof EditorCellLabelSelection) {
      return create((EditorCellLabelSelection) selection);
    } else {
      return null;
    }
  }

  public static SNode getParentTextNode(jetbrains.mps.openapi.editor.cells.EditorCell childCell) {
    return SNodeOperations.getAncestor(((SNode) childCell.getSNode()), "jetbrains.mps.editor.richtext.structure.Text", false, false);
  }

  public static SNode getParentIWord(jetbrains.mps.openapi.editor.cells.EditorCell childCell) {
    return SNodeOperations.getAncestor(((SNode) childCell.getSNode()), "jetbrains.mps.editor.richtext.structure.IWord", true, false);
  }

  public static SNode getParentIWord(jetbrains.mps.openapi.editor.cells.EditorCell childCell, SNode asDirectChildOf) {
    SNode cellNode = ((SNode) childCell.getSNode());
    if (SNodeOperations.isInstanceOf(cellNode, "jetbrains.mps.editor.richtext.structure.IWord") && SNodeOperations.getParent(cellNode) == asDirectChildOf) {
      return SNodeOperations.cast(cellNode, "jetbrains.mps.editor.richtext.structure.IWord");
    }
    for (SNode ancestor : ListSequence.fromList(SNodeOperations.getAncestors(cellNode, null, false)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.editor.richtext.structure.IWord");
      }
    })) {
      if (SNodeOperations.getParent(ancestor) == asDirectChildOf) {
        return SNodeOperations.cast(ancestor, "jetbrains.mps.editor.richtext.structure.IWord");
      }
    }
    return null;
  }

  public static jetbrains.mps.openapi.editor.cells.EditorCell getParentIWordRootCell(jetbrains.mps.openapi.editor.cells.EditorCell anyChildCell) {
    jetbrains.mps.openapi.editor.cells.EditorCell prevParent = anyChildCell;
    jetbrains.mps.openapi.editor.cells.EditorCell parent = prevParent.getParent();
    while (parent != null && prevParent.getSNode() == parent.getSNode() || !(SNodeOperations.isInstanceOf(((SNode) prevParent.getSNode()), "jetbrains.mps.editor.richtext.structure.IWord"))) {
      prevParent = parent;
      parent = prevParent.getParent();
    }
    return prevParent;
  }

  public static jetbrains.mps.openapi.editor.cells.EditorCell getFirstCommonParent(jetbrains.mps.openapi.editor.cells.EditorCell child1, jetbrains.mps.openapi.editor.cells.EditorCell child2) {
    Set<jetbrains.mps.openapi.editor.cells.EditorCell> child1Ancestors = SetSequence.fromSet(new HashSet<jetbrains.mps.openapi.editor.cells.EditorCell>());
    for (jetbrains.mps.openapi.editor.cells.EditorCell current = child1; current != null; current = current.getParent()) {
      SetSequence.fromSet(child1Ancestors).addElement(current);
    }
    for (jetbrains.mps.openapi.editor.cells.EditorCell current = child2; current != null; current = current.getParent()) {
      if (SetSequence.fromSet(child1Ancestors).contains(current)) {
        return current;
      }
    }
    return null;
  }

  public static SNode getFirstCommonParentNode(jetbrains.mps.openapi.editor.cells.EditorCell child1, jetbrains.mps.openapi.editor.cells.EditorCell child2) {
    return check_irpwvl_a0a65(getFirstCommonParent(child1, child2));
  }



  public void replaceSelectedText(final String text) {
    final TextPosition[] pos = new TextPosition[1];
    ModelAccess.instance().runWriteActionInCommand(new Computable<SNode>() {
      public SNode compute() {
        pos[0] = deleteSelected();
        Word_Behavior.call_insertTextAt_5745648783531951228(pos[0].getWord(), text, pos[0].getRelativePos());
        return pos[0].getWord();
      }
    }, myStartCell.getContext().getOperationContext().getProject());
    EditorCell_Multiline mlCell = as_irpwvl_a0a2a85(myStartCell.getEditorComponent().findNodeCell(pos[0].getWord()), EditorCell_Multiline.class);
    if (mlCell != null) {
      mlCell.setCaretPosition(pos[0].getRelativePos() + 1, true);
    }
  }



  private static int check_irpwvl_a0j0z(EditorCell_Multiline checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getTextLength();
    }
    return 0;
  }

  private static String check_irpwvl_a0a0a0a0a0a0b0lb(SNode checkedDotOperand) {
    if (null != checkedDotOperand) {
      return BehaviorReflection.invokeVirtual(String.class, checkedDotOperand, "virtual_toTextString_4433012599261204765", new Object[]{});
    }
    return null;
  }

  private static void check_irpwvl_a0a0a64(SelectionInternal checkedDotOperand, Graphics2D d) {
    if (null != checkedDotOperand) {
      checkedDotOperand.paintSelection(d);
    }

  }

  private static jetbrains.mps.openapi.editor.cells.EditorCell_Label check_irpwvl_a0a0a94(EditorCellLabelSelection checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getEditorCellLabel();
    }
    return null;
  }

  private static SNode check_irpwvl_a0a65(jetbrains.mps.openapi.editor.cells.EditorCell checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getSNode();
    }
    return null;
  }

  private static <T> T as_irpwvl_a0a0j0z(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }

  private static <T> T as_irpwvl_a0a0a0a64(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }

  private static <T> T as_irpwvl_a0a0a94(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }

  private static <T> T as_irpwvl_a0a2a85(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
}
