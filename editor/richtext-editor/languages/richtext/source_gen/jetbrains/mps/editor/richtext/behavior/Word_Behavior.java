package jetbrains.mps.editor.richtext.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import de.slisson.mps.editor.multiline.runtime.MultilineUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import de.slisson.mps.editor.multiline.cells.EditorCell_Word;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;

public class Word_Behavior {
  public static void init(SNode thisNode) {
  }

  public static String call_getText_257181264606026343(SNode thisNode) {
    return MultilineUtil.unescapeText(SPropertyOperations.getString(thisNode, "escapedValue"));
  }

  public static void call_setText_2008781830388272163(SNode thisNode, String newValue) {
    SPropertyOperations.set(thisNode, "escapedValue", MultilineUtil.escapeText(newValue));
  }

  public static int call_getTextLength_6973228588407182844(SNode thisNode) {
    return Word_Behavior.call_getText_257181264606026343(thisNode).length();
  }

  public static boolean call_isValidCursorPosition_6973228588407182986(SNode thisNode, int pos) {
    return 0 <= pos && pos <= Word_Behavior.call_getTextLength_6973228588407182844(thisNode);
  }

  public static SNode call_splitWordAt_1212807527450951534(SNode thisNode, int pos) {
    String s1 = Word_Behavior.call_getText_257181264606026343(thisNode).substring(0, pos);
    String s2 = Word_Behavior.call_getText_257181264606026343(thisNode).substring(pos);
    SNode nextWord = SConceptOperations.createNewNode("jetbrains.mps.editor.richtext.structure.Word", null);
    Word_Behavior.call_setText_2008781830388272163(nextWord, s2);
    Word_Behavior.call_setText_2008781830388272163(thisNode, s1);
    return SNodeOperations.insertNextSiblingChild(thisNode, nextWord);
  }

  public static void call_splitWordAtCaret_9091678811035945737(SNode thisNode, EditorContext editorContext) {
    Word_Behavior.call_splitWordAt_1212807527450951534(thisNode, Word_Behavior.call_getCaretPosition_1212807527450953743(thisNode, editorContext));
  }

  public static int call_getCaretPosition_1212807527450953743(SNode thisNode, EditorContext editorContext) {
    EditorCell contextCell = editorContext.getContextCell();
    if (contextCell instanceof EditorCell_Word) {
      return ((EditorCell_Word) contextCell).getParent().getCaretPosition();
    }
    return 0;
  }

  public static void call_insertTextAtCaret_2557074442922687324(SNode thisNode, String text, EditorContext editorContext) {
    int caretPosition = Word_Behavior.call_getCaretPosition_1212807527450953743(thisNode, editorContext);
    Word_Behavior.call_insertTextAt_5745648783531951228(thisNode, text, caretPosition);
  }

  public static void call_insertTextAt_5745648783531951228(SNode thisNode, String text, int pos) {
    String myText = Word_Behavior.call_getText_257181264606026343(thisNode);
    String s1 = myText.substring(0, pos);
    String s2 = myText.substring(pos);
    String newText = s1 + text + s2;
    Word_Behavior.call_setText_2008781830388272163(thisNode, newText);
  }

  public static void call_insertNodesAtCaret_5696298824709660031(SNode thisNode, List<SNode> nodes, EditorContext editorContext) {
    Word_Behavior.call_insertNodesAt_5696298824709660047(thisNode, nodes, Word_Behavior.call_getCaretPosition_1212807527450953743(thisNode, editorContext));
  }

  public static void call_insertNodesAt_5696298824709660047(SNode thisNode, List<SNode> nodes, int pos) {
    Word_Behavior.call_splitWordAt_1212807527450951534(thisNode, pos);
    SNode lastInserted = thisNode;
    for (SNode node : ListSequence.fromList(nodes)) {
      SNodeOperations.insertNextSiblingChild(lastInserted, node);
      lastInserted = node;
    }
    check_i37tv7_a3a01(SNodeOperations.as(SNodeOperations.getParent(thisNode), "jetbrains.mps.editor.richtext.structure.Text"));
  }

  public static String virtual_toTextString_4433012599261204765(SNode thisNode) {
    return Word_Behavior.call_getText_257181264606026343(thisNode);
  }

  public static Iterable<String> virtual_getTransformKeys_9006904477154868758(SAbstractConcept thisConcept) {
    return Collections.emptyList();
  }

  private static void check_i37tv7_a3a01(SNode checkedDotOperand) {
    if (null != checkedDotOperand) {
      Text_Behavior.call_ensureNormalized_3868187941957822880(checkedDotOperand);
    }

  }
}
