package jetbrains.mps.editor.richtext.runtime.selection;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.nodeEditor.cells.CellInfo;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.awt.Rectangle;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.openapi.editor.selection.Selection;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.nodeEditor.selection.EditorCellLabelSelection;
import jetbrains.mps.editor.multiline.cells.EditorCell_Word;
import jetbrains.mps.editor.multiline.cells.EditorCell_Multiline;
import jetbrains.mps.nodeEditor.cells.EditorCell_Label;
import jetbrains.mps.openapi.editor.cells.CellTraversalUtil;
import jetbrains.mps.openapi.editor.selection.SelectionManager;
import jetbrains.mps.editor.richtext.util.SelectionUtils;

public class CaretPosition {
  private EditorContext myEditorContext;
  private CellInfo myCaretCellInfo;
  private int myCaretCellPos;
  private SNode myCaretNode;
  private List<CellInfo> myCellsBeforeCaret;
  private List<CellInfo> myCellsAfterCaret;
  private Rectangle myVisibleRect;

  public CaretPosition(EditorContext editorContext) {
    myEditorContext = editorContext;
  }

  public void remember() {
    remember(myEditorContext.getSelectedCell());
  }

  public void remember(EditorCell selectedCell) {
    myCaretCellInfo = null;
    myCaretCellPos = 0;
    myCaretNode = null;
    myCellsBeforeCaret = ListSequence.fromList(new ArrayList<CellInfo>());
    myCellsAfterCaret = ListSequence.fromList(new ArrayList<CellInfo>());

    if (selectedCell == null) {
      Selection deepest = ((EditorComponent) myEditorContext.getEditorComponent()).getSelectionManager().getDeepestSelection();
      if (deepest instanceof EditorCellLabelSelection) {
        selectedCell = ((EditorCellLabelSelection) deepest).getEditorCellLabel();
      }
    }
    if (selectedCell == null) {
      return;
    }

    if (selectedCell instanceof EditorCell_Word) {
      selectedCell = selectedCell.getParent();
    }
    if (selectedCell instanceof EditorCell_Multiline) {
      myCaretCellPos = ((EditorCell_Multiline) selectedCell).getCaretPosition();
    } else if (selectedCell instanceof EditorCell_Label) {
      myCaretCellPos = ((EditorCell_Label) selectedCell).getCaretPosition();
    }

    myCaretCellInfo = ((jetbrains.mps.nodeEditor.cells.EditorCell) selectedCell).getCellInfo();

    myCaretNode = selectedCell.getSNode();

    for (EditorCell cell = CellTraversalUtil.getPrevLeaf(selectedCell); cell != null; cell = CellTraversalUtil.getPrevLeaf(cell)) {
      ListSequence.fromList(myCellsBeforeCaret).addElement(((jetbrains.mps.nodeEditor.cells.EditorCell) cell).getCellInfo());
    }

    for (EditorCell cell = CellTraversalUtil.getNextLeaf(selectedCell); cell != null; cell = CellTraversalUtil.getNextLeaf(cell)) {
      ListSequence.fromList(myCellsAfterCaret).addElement(((jetbrains.mps.nodeEditor.cells.EditorCell) cell).getCellInfo());
    }

    myVisibleRect = ((EditorComponent) myEditorContext.getEditorComponent()).getVisibleRect();
  }

  public void remember(EditorCell_Multiline mlCell, int textPos) {
    EditorCell_Word caretWordCell = mlCell.getWordCellContainingPos(textPos);
    remember(caretWordCell);
    myCaretCellPos = textPos;
  }

  public void tryRestore() {
    tryRestoreSelection();
    ((EditorComponent) myEditorContext.getEditorComponent()).scrollRectToVisible(myVisibleRect);
    ((EditorComponent) myEditorContext.getEditorComponent()).getSelectionManager().getSelection().ensureVisible();
  }

  private void tryRestoreSelection() {
    EditorComponent editorComponent = (EditorComponent) myEditorContext.getEditorComponent();
    SelectionManager selectionManager = editorComponent.getSelectionManager();

    jetbrains.mps.nodeEditor.cells.EditorCell caretCell = myCaretCellInfo.findCell(editorComponent);
    if (caretCell != null) {
      if (caretCell instanceof EditorCell_Multiline) {
        ((EditorCell_Multiline) caretCell).setCaretPosition(myCaretCellPos, true);
      } else if (caretCell instanceof EditorCell_Label) {
        selectionManager.setSelection((EditorCell_Label) caretCell, myCaretCellPos);
      } else {
        selectionManager.setSelection(caretCell);
      }
      return;
    }

    EditorCell nodeCell = myEditorContext.getEditorComponent().findNodeCell(myCaretNode);
    if (nodeCell != null) {
      nodeCell = CellTraversalUtil.getFirstLeaf(nodeCell);
      selectionManager.setSelection((jetbrains.mps.nodeEditor.cells.EditorCell) nodeCell);
      return;
    }

    for (CellInfo cellInfo : ListSequence.fromList(myCellsBeforeCaret)) {
      EditorCell cell = cellInfo.findCell(editorComponent);
      if (cell != null) {
        SelectionUtils.setCursorAtEndOfCell(cell, myEditorContext);
        return;
      }
    }

    for (CellInfo cellInfo : ListSequence.fromList(myCellsAfterCaret)) {
      EditorCell cell = cellInfo.findCell(editorComponent);
      if (cell != null) {
        SelectionUtils.setCursorAtBeginningOfCell(cell, myEditorContext);
        return;
      }
    }

  }
}
