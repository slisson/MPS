package jetbrains.mps.editor.richtext.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.editor.richtext.behavior.Text_Behavior;
import jetbrains.mps.intentions.IntentionDescriptor;

public class Text_Normalize_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public Text_Normalize_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.editor.richtext.structure.Text";
  }

  public String getPresentation() {
    return "Text_Normalize";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.editor.richtext.intentions.Text_Normalize_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.editor.richtext";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return true;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return (SNodeOperations.getAncestor(node, "jetbrains.mps.editor.richtext.structure.Text", false, false) == null);
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:fa163aad-8c9b-4361-aa5e-88392679736a(jetbrains.mps.editor.richtext.intentions)", "5500395430674355060");
  }

  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new Text_Normalize_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Normalize Text Structure";
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      Text_Behavior.call_normalizeStructure_5500395430674470428(node);
      editorContext.getEditorComponent().update();
    }

    public IntentionDescriptor getDescriptor() {
      return Text_Normalize_Intention.this;
    }
  }
}
