package jetbrains.mps.editor.richtext.util;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.cells.CellTraversalUtil;
import jetbrains.mps.nodeEditor.cells.EditorCell_Label;
import jetbrains.mps.nodeEditor.EditorComponent;

public class SelectionUtils {
  public static void setCursorAtEndOfNode(SNode node, EditorContext editorContext) {
    editorContext.flushEvents();
    EditorCell cell = editorContext.getEditorComponent().findNodeCell(node);
    setCursorAtEndOfCell(cell, editorContext);
  }

  public static void setCursorAtBeginningOfNode(SNode node, EditorContext editorContext) {
    editorContext.flushEvents();
    EditorCell cell = editorContext.getEditorComponent().findNodeCell(node);
    setCursorAtBeginningOfCell(cell, editorContext);
  }

  public static void setCursorAtEndOfCell(EditorCell cell, EditorContext editorContext) {
    if (cell == null) {
      return;
    }
    cell = CellTraversalUtil.getLastLeaf(cell);
    if (cell == null) {
      return;
    }
    if (cell instanceof EditorCell_Label) {
      EditorCell_Label labelCell = (EditorCell_Label) cell;
      labelCell.setCaretPositionIfPossible((labelCell.getText() == null ? 0 : labelCell.getText().length()));
    }
    ((EditorComponent) editorContext.getEditorComponent()).getSelectionManager().setSelection((jetbrains.mps.nodeEditor.cells.EditorCell) cell);
  }

  public static void setCursorAtBeginningOfCell(EditorCell cell, EditorContext editorContext) {
    if (cell == null) {
      return;
    }
    cell = CellTraversalUtil.getFirstLeaf(cell);
    if (cell == null) {
      return;
    }
    if (cell instanceof EditorCell_Label) {
      EditorCell_Label labelCell = (EditorCell_Label) cell;
      labelCell.setCaretPositionIfPossible(0);
    }
    ((EditorComponent) editorContext.getEditorComponent()).getSelectionManager().setSelection((jetbrains.mps.nodeEditor.cells.EditorCell) cell);
  }
}
