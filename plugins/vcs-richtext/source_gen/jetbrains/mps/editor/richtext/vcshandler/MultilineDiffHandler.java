package jetbrains.mps.editor.richtext.vcshandler;

/*Generated by MPS */

import jetbrains.mps.vcs.diff.ui.common.DiffHandler;
import jetbrains.mps.vcs.diff.ui.common.ChangeEditorMessage;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.vcs.diff.ui.common.Bounds;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import java.awt.Graphics;
import jetbrains.mps.editor.multiline.cells.EditorCell_Multiline;
import jetbrains.mps.vcs.diff.changes.SetPropertyChange;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.vcs.diff.ChangeSetImpl;
import jetbrains.mps.vcs.diff.changes.ModelChange;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.CellFinderUtil;
import org.jetbrains.mps.util.Condition;

public class MultilineDiffHandler implements DiffHandler {
  @Override
  public boolean canHandle(ChangeEditorMessage message, EditorComponent editor) {
    return getMultilineCell(message, editor) != null;
  }

  @Override
  public Bounds getBounds(ChangeEditorMessage message, EditorComponent editor) {
    return null;
  }

  @Override
  public EditorCell getCell(ChangeEditorMessage message, EditorComponent editor) {
    return getMultilineCell(message, editor);
  }

  @Override
  public boolean acceptCell(ChangeEditorMessage message, EditorComponent editor, jetbrains.mps.nodeEditor.cells.EditorCell cell) {
    return getCell(message, editor) == cell;
  }

  @Override
  public void paint(Graphics g, ChangeEditorMessage message, EditorComponent editor, jetbrains.mps.nodeEditor.cells.EditorCell cell) {
    if (cell instanceof EditorCell_Multiline) {
      EditorCell_Multiline mlCell = ((EditorCell_Multiline) cell);
      if (message.getChange() instanceof SetPropertyChange) {
        final SetPropertyChange spChange = (SetPropertyChange) message.getChange();
        String newText = spChange.getNewValue();
        ModelAccess.instance().requireRead(new Runnable() {
          public void run() {
            ((ChangeSetImpl) spChange.getChangeSet()).buildOppositeChangeSet();
          }
        });
        SetPropertyChange opposite = (SetPropertyChange) spChange.getOppositeChange();
        String oldText = opposite.getNewValue();
        mlCell.paintDiff(g, oldText, newText, false);
      }
    }
  }



  public static EditorCell_Multiline getMultilineCell(ChangeEditorMessage message, EditorComponent editor) {
    ModelChange change = message.getChange();
    if (change instanceof SetPropertyChange) {
      final SetPropertyChange setPropChange = (SetPropertyChange) change;
      SNode affectedNode = message.getNode();
      EditorCell nodeCell = editor.findNodeCell(affectedNode);

      if (nodeCell != null) {
        EditorCell_Multiline multiline = (EditorCell_Multiline) CellFinderUtil.findChildByCondition(nodeCell, new Condition<EditorCell>() {
          public boolean met(EditorCell cell) {
            if (cell instanceof EditorCell_Multiline) {
              if (eq_hi761o_a0a0a0a0a1a0a0a4a1a6(((EditorCell_Multiline) cell).getPropertyName(), setPropChange.getPropertyName())) {
                return true;
              }
            }
            return false;
          }
        }, true, true);
        return multiline;
      }
    }
    return null;
  }

  private static boolean eq_hi761o_a0a0a0a0a1a0a0a4a1a6(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
