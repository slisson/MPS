package de.slisson.mps.richtext.vcshandler;

/*Generated by MPS */

import de.slisson.mps.editor.multiline.cells.MultilineCellBackgroundPainter;
import org.apache.log4j.Logger;
import de.slisson.mps.editor.multiline.cells.EditorCell_Multiline;
import java.awt.Graphics;
import jetbrains.mps.nodeEditor.cells.ParentSettings;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.module.SModule;
import name.fraser.neil.plaintext.diff_match_patch;
import java.util.LinkedList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.apache.commons.lang3.StringUtils;
import java.util.List;
import jetbrains.mps.openapi.editor.message.SimpleEditorMessage;
import java.lang.reflect.Field;
import jetbrains.mps.internal.collections.runtime.ISelector;
import java.util.ArrayList;
import jetbrains.mps.openapi.editor.cells.EditorCell_Collection;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;

public class DiffPainter implements MultilineCellBackgroundPainter {
  private static final Logger LOG = Logger.getLogger(DiffPainter.class);
  private static String SEPARATOR = "#\u00a7$%&/()=?+*-_:.,;<|>";

  public void paint(EditorCell_Multiline cell, Graphics g, ParentSettings parentSettings) {
    try {
      paintUnsafe(cell, g, parentSettings);
    } catch (Exception ex) {
      LOG.error(ex);
    }
  }

  public void paintUnsafe(final EditorCell_Multiline cell, final Graphics g, ParentSettings parentSettings) throws Exception {
    if (!(isInDiffView(cell))) {
      return;
    }

    ModelAccess.instance().requireRead(new Runnable() {
      public void run() {
        EditorCell richtextCell = findParentRichtextCell(cell);
        if (richtextCell == null) {
          return;
        }

        final SModel oldModel = getModel(richtextCell, false);
        if (oldModel == null) {
          return;
        }
        final SModel newModel = getModel(richtextCell, true);
        if (newModel == null) {
          return;
        }


        SNode myNode = SNodeOperations.cast(richtextCell.getSNode(), "de.slisson.mps.richtext.structure.Text");
        SModel myModel = SNodeOperations.getModel(myNode);
        SModule myModule = myModel.getModule();
        String myModuleClassName = myModule.getClass().getName();
        boolean iAmOld = "jetbrains.mps.vcs.diff.ui.common.DiffTemporaryModule".equals(myModuleClassName);
        boolean iAmNew = !(iAmOld);
        SNode oldNode = SNodeOperations.cast(((SNode) oldModel.getNode(myNode.getNodeId())), "de.slisson.mps.richtext.structure.Text");
        SNode newNode = SNodeOperations.cast(((SNode) newModel.getNode(myNode.getNodeId())), "de.slisson.mps.richtext.structure.Text");
        String myText = richtextToDiffText(myNode);
        if (iAmNew && (oldNode != null) || iAmOld && (newNode != null)) {
          String otherText = richtextToDiffText((iAmNew ? oldNode : newNode));

          diff_match_patch differ = new diff_match_patch();
          LinkedList<diff_match_patch.Diff> diffs = (iAmNew ? differ.diff_main(otherText, myText) : differ.diff_main(myText, otherText));
          differ.diff_cleanupSemantic(diffs);

          for (SNode wordChild : ListSequence.fromList(SLinkOperations.getTargets(myNode, "words", true)).where(new IWhereFilter<SNode>() {
            public boolean accept(SNode it) {
              return SNodeOperations.isInstanceOf(it, "de.slisson.mps.richtext.structure.Word");
            }
          })) {
            EditorCell_Multiline wordChildCell = as_ely5eb_a0a0a6a81a0a0a0a2a3(richtextCell.getEditorComponent().findNodeCell(wordChild), EditorCell_Multiline.class);
            if (wordChildCell != cell) {
              continue;
            }

            StringBuilder otherWordText = new StringBuilder();
            boolean startFound = false;
            boolean endFound = false;
            String key = DiffPainter.SEPARATOR + wordChild.getNodeId().toString() + DiffPainter.SEPARATOR;
            for (diff_match_patch.Diff diff : ListSequence.fromList(diffs)) {
              String diffText = diff.text;

              if (!(startFound)) {
                if (diff.operation == diff_match_patch.Operation.EQUAL) {
                  if (diffText.contains(key)) {
                    diffText = StringUtils.substringAfter(diffText, key);
                    startFound = true;
                  }
                } else if (diff.operation == ((iAmNew ? diff_match_patch.Operation.INSERT : diff_match_patch.Operation.DELETE))) {
                  if (diffText.contains(key)) {
                    startFound = true;
                    continue;
                  }
                }
              }

              if (startFound) {
                if (diff.operation == diff_match_patch.Operation.EQUAL || diff.operation == ((iAmNew ? diff_match_patch.Operation.INSERT : diff_match_patch.Operation.DELETE))) {
                  if (diffText.contains(DiffPainter.SEPARATOR)) {
                    diffText = StringUtils.substringBefore(diffText, DiffPainter.SEPARATOR);
                    endFound = true;
                  }
                }
                if (diff.operation == diff_match_patch.Operation.EQUAL || diff.operation == ((iAmNew ? diff_match_patch.Operation.DELETE : diff_match_patch.Operation.INSERT))) {
                  otherWordText.append(diffText);
                }
                if (endFound) {
                  break;
                }
              }
            }
            if (iAmNew) {
              cell.paintDiff(g, otherWordText.toString(), cell.getText(), false);
            } else {
              cell.paintDiff(g, cell.getText(), otherWordText.toString(), false);
            }
          }
        }

      }
    });
  }

  public boolean isInDiffView(EditorCell cell) {
    List<SimpleEditorMessage> messages = collectMessages(cell);
    for (SimpleEditorMessage message : ListSequence.fromList(messages)) {
      try {
        Class msgClass = message.getClass();
        if (msgClass.getName().equals("jetbrains.mps.vcs.diff.ui.common.ChangeEditorMessage")) {
          Field highlightedField = msgClass.getDeclaredField("myHighlighted");
          highlightedField.setAccessible(true);
          boolean highlighted = (Boolean) highlightedField.get(message);
          if (highlighted) {
            return true;
          }
        }
      } catch (Exception ex) {
        DiffPainter.LOG.error(ex);
      }
    }
    return false;
  }

  public SModel getModel(EditorCell cell, boolean newModel) {
    List<SimpleEditorMessage> messages = collectMessages(cell);
    List<Object> changes = ListSequence.fromList(messages).select(new ISelector<SimpleEditorMessage, Object>() {
      public Object select(SimpleEditorMessage it) {
        return tryGetChange(it);
      }
    }).where(new IWhereFilter<Object>() {
      public boolean accept(Object it) {
        return it != null;
      }
    }).toListSequence();
    for (Object change : changes) {
      try {
        Object changeSet = change.getClass().getMethod("getChangeSet").invoke(change);
        if (newModel) {
          return (SModel) changeSet.getClass().getMethod("getNewModel").invoke(changeSet);
        } else {
          return (SModel) changeSet.getClass().getMethod("getOldModel").invoke(changeSet);
        }
      } catch (Exception ex) {
        DiffPainter.LOG.error(ex);
      }
    }

    return null;
  }

  public Object tryGetChange(SimpleEditorMessage message) {
    try {
      Class msgClass = message.getClass();
      if (msgClass.getName().equals("jetbrains.mps.vcs.diff.ui.common.ChangeEditorMessage")) {
        Object change = msgClass.getMethod("getChange").invoke(message);
        return change;
      }
    } catch (Exception ex) {
      DiffPainter.LOG.error(ex);
    }
    return null;
  }

  public List<SimpleEditorMessage> collectMessages(EditorCell cell) {
    List<SimpleEditorMessage> result = ListSequence.fromList(new ArrayList<SimpleEditorMessage>());
    collectMessages(cell, result);
    return result;
  }

  public void collectMessages(EditorCell cell, List<SimpleEditorMessage> accumulator) {
    if (cell == null) {
      return;
    }
    ListSequence.fromList(accumulator).addSequence(ListSequence.fromList(cell.getMessages()));
    EditorCell_Collection collectionCell = as_ely5eb_a0a2a8(cell, EditorCell_Collection.class);
    if (collectionCell == null) {
      return;
    }
    for (EditorCell child : Sequence.fromIterable(collectionCell)) {
      collectMessages(child, accumulator);
    }
  }

  public String richtextToDiffText(SNode textNode) {
    StringBuilder sb = new StringBuilder();
    for (SNode word : ListSequence.fromList(SLinkOperations.getTargets(textNode, "words", true))) {
      if (SNodeOperations.isInstanceOf(word, "de.slisson.mps.richtext.structure.Word")) {
        sb.append(DiffPainter.SEPARATOR).append(word.getNodeId().toString()).append(DiffPainter.SEPARATOR);
        sb.append(BehaviorReflection.invokeNonVirtual(String.class, SNodeOperations.cast(word, "de.slisson.mps.richtext.structure.Word"), "de.slisson.mps.richtext.structure.Word", "call_getText_257181264606026343", new Object[]{}));
      } else {
        sb.append(DiffPainter.SEPARATOR).append(word.getNodeId().toString()).append(DiffPainter.SEPARATOR);
      }
    }
    return sb.toString();
  }

  public EditorCell findParentRichtextCell(EditorCell childCell) {
    if (childCell == null) {
      return null;
    }
    if (SNodeOperations.isInstanceOf(((SNode) childCell.getSNode()), "de.slisson.mps.richtext.structure.Text")) {
      return childCell;
    }
    return findParentRichtextCell(childCell.getParent());
  }

  private static <T> T as_ely5eb_a0a0a6a81a0a0a0a2a3(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }

  private static <T> T as_ely5eb_a0a2a8(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
}
