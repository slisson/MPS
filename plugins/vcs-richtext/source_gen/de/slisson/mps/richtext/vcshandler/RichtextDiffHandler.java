package de.slisson.mps.richtext.vcshandler;

/*Generated by MPS */

import jetbrains.mps.vcs.diff.ui.common.DiffHandler;
import jetbrains.mps.vcs.diff.ui.common.ChangeEditorMessage;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.vcs.diff.changes.ModelChange;
import jetbrains.mps.vcs.diff.changes.SetPropertyChange;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.util.Computable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.vcs.diff.ui.common.Bounds;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import java.awt.Graphics;
import de.slisson.mps.editor.multiline.cells.EditorCell_Multiline;
import jetbrains.mps.nodeEditor.cells.ParentSettings;

public class RichtextDiffHandler implements DiffHandler {


  @Override
  public boolean canHandle(ChangeEditorMessage message, EditorComponent component) {
    ModelChange change = message.getChange();

    // text changed 
    if (change instanceof SetPropertyChange) {
      SetPropertyChange setPropChange = (SetPropertyChange) change;
      final SNode affectedNode = message.getNode();
      boolean isWordInText = ModelAccess.instance().requireRead(new Computable<Boolean>() {
        public Boolean compute() {
          return SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(affectedNode), "de.slisson.mps.richtext.structure.Word") && SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(SNodeOperations.getParent(affectedNode)), "de.slisson.mps.richtext.structure.Text");
        }
      });
      if (isWordInText) {
        return true;
      }
    }

    return false;
  }

  @Override
  public Bounds getBounds(ChangeEditorMessage message, EditorComponent editor) {
    return null;
  }

  @Override
  public EditorCell getCell(ChangeEditorMessage message, EditorComponent editor) {
    return MultilineDiffHandler.getMultilineCell(message, editor);
  }

  @Override
  public boolean acceptCell(ChangeEditorMessage message, EditorComponent editor, jetbrains.mps.nodeEditor.cells.EditorCell cell) {
    return getCell(message, editor) == cell;
  }

  @Override
  public void paint(Graphics g, ChangeEditorMessage messages, EditorComponent editor, jetbrains.mps.nodeEditor.cells.EditorCell cell) {
    new DiffPainter().paint((EditorCell_Multiline) cell, g, ParentSettings.createDefaultSetting());
  }


}
